
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Trip
 * 
 */
export type Trip = $Result.DefaultSelection<Prisma.$TripPayload>
/**
 * Model Location
 * 
 */
export type Location = $Result.DefaultSelection<Prisma.$LocationPayload>
/**
 * Model LocationType
 * 
 */
export type LocationType = $Result.DefaultSelection<Prisma.$LocationTypePayload>
/**
 * Model Photo
 * 
 */
export type Photo = $Result.DefaultSelection<Prisma.$PhotoPayload>
/**
 * Model TripLocation
 * 
 */
export type TripLocation = $Result.DefaultSelection<Prisma.$TripLocationPayload>
/**
 * Model UserTrip
 * 
 */
export type UserTrip = $Result.DefaultSelection<Prisma.$UserTripPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserType: {
  ADMIN: 'ADMIN',
  NORMAL_USER: 'NORMAL_USER'
};

export type UserType = (typeof UserType)[keyof typeof UserType]

}

export type UserType = $Enums.UserType

export const UserType: typeof $Enums.UserType

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.trip`: Exposes CRUD operations for the **Trip** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Trips
    * const trips = await prisma.trip.findMany()
    * ```
    */
  get trip(): Prisma.TripDelegate<ExtArgs>;

  /**
   * `prisma.location`: Exposes CRUD operations for the **Location** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Locations
    * const locations = await prisma.location.findMany()
    * ```
    */
  get location(): Prisma.LocationDelegate<ExtArgs>;

  /**
   * `prisma.locationType`: Exposes CRUD operations for the **LocationType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LocationTypes
    * const locationTypes = await prisma.locationType.findMany()
    * ```
    */
  get locationType(): Prisma.LocationTypeDelegate<ExtArgs>;

  /**
   * `prisma.photo`: Exposes CRUD operations for the **Photo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Photos
    * const photos = await prisma.photo.findMany()
    * ```
    */
  get photo(): Prisma.PhotoDelegate<ExtArgs>;

  /**
   * `prisma.tripLocation`: Exposes CRUD operations for the **TripLocation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TripLocations
    * const tripLocations = await prisma.tripLocation.findMany()
    * ```
    */
  get tripLocation(): Prisma.TripLocationDelegate<ExtArgs>;

  /**
   * `prisma.userTrip`: Exposes CRUD operations for the **UserTrip** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserTrips
    * const userTrips = await prisma.userTrip.findMany()
    * ```
    */
  get userTrip(): Prisma.UserTripDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.12.1
   * Query Engine version: 473ed3124229e22d881cb7addf559799debae1ab
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Trip: 'Trip',
    Location: 'Location',
    LocationType: 'LocationType',
    Photo: 'Photo',
    TripLocation: 'TripLocation',
    UserTrip: 'UserTrip'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'trip' | 'location' | 'locationType' | 'photo' | 'tripLocation' | 'userTrip'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Trip: {
        payload: Prisma.$TripPayload<ExtArgs>
        fields: Prisma.TripFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TripFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TripPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TripFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TripPayload>
          }
          findFirst: {
            args: Prisma.TripFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TripPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TripFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TripPayload>
          }
          findMany: {
            args: Prisma.TripFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TripPayload>[]
          }
          create: {
            args: Prisma.TripCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TripPayload>
          }
          createMany: {
            args: Prisma.TripCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TripDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TripPayload>
          }
          update: {
            args: Prisma.TripUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TripPayload>
          }
          deleteMany: {
            args: Prisma.TripDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TripUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TripUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TripPayload>
          }
          aggregate: {
            args: Prisma.TripAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTrip>
          }
          groupBy: {
            args: Prisma.TripGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TripGroupByOutputType>[]
          }
          count: {
            args: Prisma.TripCountArgs<ExtArgs>,
            result: $Utils.Optional<TripCountAggregateOutputType> | number
          }
        }
      }
      Location: {
        payload: Prisma.$LocationPayload<ExtArgs>
        fields: Prisma.LocationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LocationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LocationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          findFirst: {
            args: Prisma.LocationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LocationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          findMany: {
            args: Prisma.LocationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>[]
          }
          create: {
            args: Prisma.LocationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          createMany: {
            args: Prisma.LocationCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.LocationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          update: {
            args: Prisma.LocationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          deleteMany: {
            args: Prisma.LocationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.LocationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.LocationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          aggregate: {
            args: Prisma.LocationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLocation>
          }
          groupBy: {
            args: Prisma.LocationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LocationGroupByOutputType>[]
          }
          count: {
            args: Prisma.LocationCountArgs<ExtArgs>,
            result: $Utils.Optional<LocationCountAggregateOutputType> | number
          }
        }
      }
      LocationType: {
        payload: Prisma.$LocationTypePayload<ExtArgs>
        fields: Prisma.LocationTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LocationTypeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocationTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LocationTypeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocationTypePayload>
          }
          findFirst: {
            args: Prisma.LocationTypeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocationTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LocationTypeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocationTypePayload>
          }
          findMany: {
            args: Prisma.LocationTypeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocationTypePayload>[]
          }
          create: {
            args: Prisma.LocationTypeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocationTypePayload>
          }
          createMany: {
            args: Prisma.LocationTypeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.LocationTypeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocationTypePayload>
          }
          update: {
            args: Prisma.LocationTypeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocationTypePayload>
          }
          deleteMany: {
            args: Prisma.LocationTypeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.LocationTypeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.LocationTypeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocationTypePayload>
          }
          aggregate: {
            args: Prisma.LocationTypeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLocationType>
          }
          groupBy: {
            args: Prisma.LocationTypeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LocationTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.LocationTypeCountArgs<ExtArgs>,
            result: $Utils.Optional<LocationTypeCountAggregateOutputType> | number
          }
        }
      }
      Photo: {
        payload: Prisma.$PhotoPayload<ExtArgs>
        fields: Prisma.PhotoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PhotoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PhotoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PhotoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PhotoPayload>
          }
          findFirst: {
            args: Prisma.PhotoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PhotoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PhotoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PhotoPayload>
          }
          findMany: {
            args: Prisma.PhotoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PhotoPayload>[]
          }
          create: {
            args: Prisma.PhotoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PhotoPayload>
          }
          createMany: {
            args: Prisma.PhotoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PhotoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PhotoPayload>
          }
          update: {
            args: Prisma.PhotoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PhotoPayload>
          }
          deleteMany: {
            args: Prisma.PhotoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PhotoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PhotoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PhotoPayload>
          }
          aggregate: {
            args: Prisma.PhotoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePhoto>
          }
          groupBy: {
            args: Prisma.PhotoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PhotoGroupByOutputType>[]
          }
          count: {
            args: Prisma.PhotoCountArgs<ExtArgs>,
            result: $Utils.Optional<PhotoCountAggregateOutputType> | number
          }
        }
      }
      TripLocation: {
        payload: Prisma.$TripLocationPayload<ExtArgs>
        fields: Prisma.TripLocationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TripLocationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TripLocationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TripLocationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TripLocationPayload>
          }
          findFirst: {
            args: Prisma.TripLocationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TripLocationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TripLocationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TripLocationPayload>
          }
          findMany: {
            args: Prisma.TripLocationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TripLocationPayload>[]
          }
          create: {
            args: Prisma.TripLocationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TripLocationPayload>
          }
          createMany: {
            args: Prisma.TripLocationCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TripLocationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TripLocationPayload>
          }
          update: {
            args: Prisma.TripLocationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TripLocationPayload>
          }
          deleteMany: {
            args: Prisma.TripLocationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TripLocationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TripLocationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TripLocationPayload>
          }
          aggregate: {
            args: Prisma.TripLocationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTripLocation>
          }
          groupBy: {
            args: Prisma.TripLocationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TripLocationGroupByOutputType>[]
          }
          count: {
            args: Prisma.TripLocationCountArgs<ExtArgs>,
            result: $Utils.Optional<TripLocationCountAggregateOutputType> | number
          }
        }
      }
      UserTrip: {
        payload: Prisma.$UserTripPayload<ExtArgs>
        fields: Prisma.UserTripFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserTripFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserTripPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserTripFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserTripPayload>
          }
          findFirst: {
            args: Prisma.UserTripFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserTripPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserTripFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserTripPayload>
          }
          findMany: {
            args: Prisma.UserTripFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserTripPayload>[]
          }
          create: {
            args: Prisma.UserTripCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserTripPayload>
          }
          createMany: {
            args: Prisma.UserTripCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserTripDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserTripPayload>
          }
          update: {
            args: Prisma.UserTripUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserTripPayload>
          }
          deleteMany: {
            args: Prisma.UserTripDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserTripUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserTripUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserTripPayload>
          }
          aggregate: {
            args: Prisma.UserTripAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUserTrip>
          }
          groupBy: {
            args: Prisma.UserTripGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserTripGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserTripCountArgs<ExtArgs>,
            result: $Utils.Optional<UserTripCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    trips: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    trips?: boolean | UserCountOutputTypeCountTripsArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTripsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserTripWhereInput
  }



  /**
   * Count Type TripCountOutputType
   */

  export type TripCountOutputType = {
    locations: number
    users: number
    TripLocation: number
  }

  export type TripCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    locations?: boolean | TripCountOutputTypeCountLocationsArgs
    users?: boolean | TripCountOutputTypeCountUsersArgs
    TripLocation?: boolean | TripCountOutputTypeCountTripLocationArgs
  }

  // Custom InputTypes

  /**
   * TripCountOutputType without action
   */
  export type TripCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TripCountOutputType
     */
    select?: TripCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * TripCountOutputType without action
   */
  export type TripCountOutputTypeCountLocationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LocationWhereInput
  }


  /**
   * TripCountOutputType without action
   */
  export type TripCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserTripWhereInput
  }


  /**
   * TripCountOutputType without action
   */
  export type TripCountOutputTypeCountTripLocationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TripLocationWhereInput
  }



  /**
   * Count Type LocationCountOutputType
   */

  export type LocationCountOutputType = {
    photos: number
    trips: number
  }

  export type LocationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    photos?: boolean | LocationCountOutputTypeCountPhotosArgs
    trips?: boolean | LocationCountOutputTypeCountTripsArgs
  }

  // Custom InputTypes

  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationCountOutputType
     */
    select?: LocationCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeCountPhotosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PhotoWhereInput
  }


  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeCountTripsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TripLocationWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    uuid: number | null
  }

  export type UserSumAggregateOutputType = {
    uuid: number | null
  }

  export type UserMinAggregateOutputType = {
    uuid: number | null
    firstName: string | null
    lastName: string | null
    avatar: string | null
    username: string | null
    password: string | null
    email: string | null
    type: $Enums.UserType | null
  }

  export type UserMaxAggregateOutputType = {
    uuid: number | null
    firstName: string | null
    lastName: string | null
    avatar: string | null
    username: string | null
    password: string | null
    email: string | null
    type: $Enums.UserType | null
  }

  export type UserCountAggregateOutputType = {
    uuid: number
    firstName: number
    lastName: number
    avatar: number
    username: number
    password: number
    email: number
    type: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    uuid?: true
  }

  export type UserSumAggregateInputType = {
    uuid?: true
  }

  export type UserMinAggregateInputType = {
    uuid?: true
    firstName?: true
    lastName?: true
    avatar?: true
    username?: true
    password?: true
    email?: true
    type?: true
  }

  export type UserMaxAggregateInputType = {
    uuid?: true
    firstName?: true
    lastName?: true
    avatar?: true
    username?: true
    password?: true
    email?: true
    type?: true
  }

  export type UserCountAggregateInputType = {
    uuid?: true
    firstName?: true
    lastName?: true
    avatar?: true
    username?: true
    password?: true
    email?: true
    type?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    uuid: number
    firstName: string
    lastName: string
    avatar: string | null
    username: string
    password: string
    email: string
    type: $Enums.UserType
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    uuid?: boolean
    firstName?: boolean
    lastName?: boolean
    avatar?: boolean
    username?: boolean
    password?: boolean
    email?: boolean
    type?: boolean
    trips?: boolean | User$tripsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    uuid?: boolean
    firstName?: boolean
    lastName?: boolean
    avatar?: boolean
    username?: boolean
    password?: boolean
    email?: boolean
    type?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    trips?: boolean | User$tripsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      trips: Prisma.$UserTripPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      uuid: number
      firstName: string
      lastName: string
      avatar: string | null
      username: string
      password: string
      email: string
      type: $Enums.UserType
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `uuid`
     * const userWithUuidOnly = await prisma.user.findMany({ select: { uuid: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    trips<T extends User$tripsArgs<ExtArgs> = {}>(args?: Subset<T, User$tripsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserTripPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly uuid: FieldRef<"User", 'Int'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly avatar: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly type: FieldRef<"User", 'UserType'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.trips
   */
  export type User$tripsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTrip
     */
    select?: UserTripSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserTripInclude<ExtArgs> | null
    where?: UserTripWhereInput
    orderBy?: UserTripOrderByWithRelationInput | UserTripOrderByWithRelationInput[]
    cursor?: UserTripWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserTripScalarFieldEnum | UserTripScalarFieldEnum[]
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model Trip
   */

  export type AggregateTrip = {
    _count: TripCountAggregateOutputType | null
    _avg: TripAvgAggregateOutputType | null
    _sum: TripSumAggregateOutputType | null
    _min: TripMinAggregateOutputType | null
    _max: TripMaxAggregateOutputType | null
  }

  export type TripAvgAggregateOutputType = {
    uuid: number | null
    rating: number | null
  }

  export type TripSumAggregateOutputType = {
    uuid: number | null
    rating: number | null
  }

  export type TripMinAggregateOutputType = {
    uuid: number | null
    description: string | null
    name: string | null
    startDate: Date | null
    endDate: Date | null
    rating: number | null
  }

  export type TripMaxAggregateOutputType = {
    uuid: number | null
    description: string | null
    name: string | null
    startDate: Date | null
    endDate: Date | null
    rating: number | null
  }

  export type TripCountAggregateOutputType = {
    uuid: number
    description: number
    name: number
    startDate: number
    endDate: number
    rating: number
    _all: number
  }


  export type TripAvgAggregateInputType = {
    uuid?: true
    rating?: true
  }

  export type TripSumAggregateInputType = {
    uuid?: true
    rating?: true
  }

  export type TripMinAggregateInputType = {
    uuid?: true
    description?: true
    name?: true
    startDate?: true
    endDate?: true
    rating?: true
  }

  export type TripMaxAggregateInputType = {
    uuid?: true
    description?: true
    name?: true
    startDate?: true
    endDate?: true
    rating?: true
  }

  export type TripCountAggregateInputType = {
    uuid?: true
    description?: true
    name?: true
    startDate?: true
    endDate?: true
    rating?: true
    _all?: true
  }

  export type TripAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Trip to aggregate.
     */
    where?: TripWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trips to fetch.
     */
    orderBy?: TripOrderByWithRelationInput | TripOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TripWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trips from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trips.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Trips
    **/
    _count?: true | TripCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TripAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TripSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TripMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TripMaxAggregateInputType
  }

  export type GetTripAggregateType<T extends TripAggregateArgs> = {
        [P in keyof T & keyof AggregateTrip]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTrip[P]>
      : GetScalarType<T[P], AggregateTrip[P]>
  }




  export type TripGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TripWhereInput
    orderBy?: TripOrderByWithAggregationInput | TripOrderByWithAggregationInput[]
    by: TripScalarFieldEnum[] | TripScalarFieldEnum
    having?: TripScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TripCountAggregateInputType | true
    _avg?: TripAvgAggregateInputType
    _sum?: TripSumAggregateInputType
    _min?: TripMinAggregateInputType
    _max?: TripMaxAggregateInputType
  }

  export type TripGroupByOutputType = {
    uuid: number
    description: string
    name: string
    startDate: Date
    endDate: Date
    rating: number
    _count: TripCountAggregateOutputType | null
    _avg: TripAvgAggregateOutputType | null
    _sum: TripSumAggregateOutputType | null
    _min: TripMinAggregateOutputType | null
    _max: TripMaxAggregateOutputType | null
  }

  type GetTripGroupByPayload<T extends TripGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TripGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TripGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TripGroupByOutputType[P]>
            : GetScalarType<T[P], TripGroupByOutputType[P]>
        }
      >
    >


  export type TripSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    uuid?: boolean
    description?: boolean
    name?: boolean
    startDate?: boolean
    endDate?: boolean
    rating?: boolean
    locations?: boolean | Trip$locationsArgs<ExtArgs>
    users?: boolean | Trip$usersArgs<ExtArgs>
    TripLocation?: boolean | Trip$TripLocationArgs<ExtArgs>
    _count?: boolean | TripCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["trip"]>

  export type TripSelectScalar = {
    uuid?: boolean
    description?: boolean
    name?: boolean
    startDate?: boolean
    endDate?: boolean
    rating?: boolean
  }

  export type TripInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    locations?: boolean | Trip$locationsArgs<ExtArgs>
    users?: boolean | Trip$usersArgs<ExtArgs>
    TripLocation?: boolean | Trip$TripLocationArgs<ExtArgs>
    _count?: boolean | TripCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $TripPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Trip"
    objects: {
      locations: Prisma.$LocationPayload<ExtArgs>[]
      users: Prisma.$UserTripPayload<ExtArgs>[]
      TripLocation: Prisma.$TripLocationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      uuid: number
      description: string
      name: string
      startDate: Date
      endDate: Date
      rating: number
    }, ExtArgs["result"]["trip"]>
    composites: {}
  }


  type TripGetPayload<S extends boolean | null | undefined | TripDefaultArgs> = $Result.GetResult<Prisma.$TripPayload, S>

  type TripCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TripFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TripCountAggregateInputType | true
    }

  export interface TripDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Trip'], meta: { name: 'Trip' } }
    /**
     * Find zero or one Trip that matches the filter.
     * @param {TripFindUniqueArgs} args - Arguments to find a Trip
     * @example
     * // Get one Trip
     * const trip = await prisma.trip.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TripFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TripFindUniqueArgs<ExtArgs>>
    ): Prisma__TripClient<$Result.GetResult<Prisma.$TripPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Trip that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TripFindUniqueOrThrowArgs} args - Arguments to find a Trip
     * @example
     * // Get one Trip
     * const trip = await prisma.trip.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TripFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TripFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TripClient<$Result.GetResult<Prisma.$TripPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Trip that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TripFindFirstArgs} args - Arguments to find a Trip
     * @example
     * // Get one Trip
     * const trip = await prisma.trip.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TripFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TripFindFirstArgs<ExtArgs>>
    ): Prisma__TripClient<$Result.GetResult<Prisma.$TripPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Trip that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TripFindFirstOrThrowArgs} args - Arguments to find a Trip
     * @example
     * // Get one Trip
     * const trip = await prisma.trip.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TripFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TripFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TripClient<$Result.GetResult<Prisma.$TripPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Trips that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TripFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Trips
     * const trips = await prisma.trip.findMany()
     * 
     * // Get first 10 Trips
     * const trips = await prisma.trip.findMany({ take: 10 })
     * 
     * // Only select the `uuid`
     * const tripWithUuidOnly = await prisma.trip.findMany({ select: { uuid: true } })
     * 
    **/
    findMany<T extends TripFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TripFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TripPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Trip.
     * @param {TripCreateArgs} args - Arguments to create a Trip.
     * @example
     * // Create one Trip
     * const Trip = await prisma.trip.create({
     *   data: {
     *     // ... data to create a Trip
     *   }
     * })
     * 
    **/
    create<T extends TripCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TripCreateArgs<ExtArgs>>
    ): Prisma__TripClient<$Result.GetResult<Prisma.$TripPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Trips.
     *     @param {TripCreateManyArgs} args - Arguments to create many Trips.
     *     @example
     *     // Create many Trips
     *     const trip = await prisma.trip.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TripCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TripCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Trip.
     * @param {TripDeleteArgs} args - Arguments to delete one Trip.
     * @example
     * // Delete one Trip
     * const Trip = await prisma.trip.delete({
     *   where: {
     *     // ... filter to delete one Trip
     *   }
     * })
     * 
    **/
    delete<T extends TripDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TripDeleteArgs<ExtArgs>>
    ): Prisma__TripClient<$Result.GetResult<Prisma.$TripPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Trip.
     * @param {TripUpdateArgs} args - Arguments to update one Trip.
     * @example
     * // Update one Trip
     * const trip = await prisma.trip.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TripUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TripUpdateArgs<ExtArgs>>
    ): Prisma__TripClient<$Result.GetResult<Prisma.$TripPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Trips.
     * @param {TripDeleteManyArgs} args - Arguments to filter Trips to delete.
     * @example
     * // Delete a few Trips
     * const { count } = await prisma.trip.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TripDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TripDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Trips.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TripUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Trips
     * const trip = await prisma.trip.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TripUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TripUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Trip.
     * @param {TripUpsertArgs} args - Arguments to update or create a Trip.
     * @example
     * // Update or create a Trip
     * const trip = await prisma.trip.upsert({
     *   create: {
     *     // ... data to create a Trip
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Trip we want to update
     *   }
     * })
    **/
    upsert<T extends TripUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TripUpsertArgs<ExtArgs>>
    ): Prisma__TripClient<$Result.GetResult<Prisma.$TripPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Trips.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TripCountArgs} args - Arguments to filter Trips to count.
     * @example
     * // Count the number of Trips
     * const count = await prisma.trip.count({
     *   where: {
     *     // ... the filter for the Trips we want to count
     *   }
     * })
    **/
    count<T extends TripCountArgs>(
      args?: Subset<T, TripCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TripCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Trip.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TripAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TripAggregateArgs>(args: Subset<T, TripAggregateArgs>): Prisma.PrismaPromise<GetTripAggregateType<T>>

    /**
     * Group by Trip.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TripGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TripGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TripGroupByArgs['orderBy'] }
        : { orderBy?: TripGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TripGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTripGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Trip model
   */
  readonly fields: TripFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Trip.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TripClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    locations<T extends Trip$locationsArgs<ExtArgs> = {}>(args?: Subset<T, Trip$locationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, 'findMany'> | Null>;

    users<T extends Trip$usersArgs<ExtArgs> = {}>(args?: Subset<T, Trip$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserTripPayload<ExtArgs>, T, 'findMany'> | Null>;

    TripLocation<T extends Trip$TripLocationArgs<ExtArgs> = {}>(args?: Subset<T, Trip$TripLocationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TripLocationPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Trip model
   */ 
  interface TripFieldRefs {
    readonly uuid: FieldRef<"Trip", 'Int'>
    readonly description: FieldRef<"Trip", 'String'>
    readonly name: FieldRef<"Trip", 'String'>
    readonly startDate: FieldRef<"Trip", 'DateTime'>
    readonly endDate: FieldRef<"Trip", 'DateTime'>
    readonly rating: FieldRef<"Trip", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Trip findUnique
   */
  export type TripFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trip
     */
    select?: TripSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TripInclude<ExtArgs> | null
    /**
     * Filter, which Trip to fetch.
     */
    where: TripWhereUniqueInput
  }


  /**
   * Trip findUniqueOrThrow
   */
  export type TripFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trip
     */
    select?: TripSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TripInclude<ExtArgs> | null
    /**
     * Filter, which Trip to fetch.
     */
    where: TripWhereUniqueInput
  }


  /**
   * Trip findFirst
   */
  export type TripFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trip
     */
    select?: TripSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TripInclude<ExtArgs> | null
    /**
     * Filter, which Trip to fetch.
     */
    where?: TripWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trips to fetch.
     */
    orderBy?: TripOrderByWithRelationInput | TripOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Trips.
     */
    cursor?: TripWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trips from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trips.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Trips.
     */
    distinct?: TripScalarFieldEnum | TripScalarFieldEnum[]
  }


  /**
   * Trip findFirstOrThrow
   */
  export type TripFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trip
     */
    select?: TripSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TripInclude<ExtArgs> | null
    /**
     * Filter, which Trip to fetch.
     */
    where?: TripWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trips to fetch.
     */
    orderBy?: TripOrderByWithRelationInput | TripOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Trips.
     */
    cursor?: TripWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trips from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trips.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Trips.
     */
    distinct?: TripScalarFieldEnum | TripScalarFieldEnum[]
  }


  /**
   * Trip findMany
   */
  export type TripFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trip
     */
    select?: TripSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TripInclude<ExtArgs> | null
    /**
     * Filter, which Trips to fetch.
     */
    where?: TripWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trips to fetch.
     */
    orderBy?: TripOrderByWithRelationInput | TripOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Trips.
     */
    cursor?: TripWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trips from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trips.
     */
    skip?: number
    distinct?: TripScalarFieldEnum | TripScalarFieldEnum[]
  }


  /**
   * Trip create
   */
  export type TripCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trip
     */
    select?: TripSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TripInclude<ExtArgs> | null
    /**
     * The data needed to create a Trip.
     */
    data: XOR<TripCreateInput, TripUncheckedCreateInput>
  }


  /**
   * Trip createMany
   */
  export type TripCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Trips.
     */
    data: TripCreateManyInput | TripCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Trip update
   */
  export type TripUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trip
     */
    select?: TripSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TripInclude<ExtArgs> | null
    /**
     * The data needed to update a Trip.
     */
    data: XOR<TripUpdateInput, TripUncheckedUpdateInput>
    /**
     * Choose, which Trip to update.
     */
    where: TripWhereUniqueInput
  }


  /**
   * Trip updateMany
   */
  export type TripUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Trips.
     */
    data: XOR<TripUpdateManyMutationInput, TripUncheckedUpdateManyInput>
    /**
     * Filter which Trips to update
     */
    where?: TripWhereInput
  }


  /**
   * Trip upsert
   */
  export type TripUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trip
     */
    select?: TripSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TripInclude<ExtArgs> | null
    /**
     * The filter to search for the Trip to update in case it exists.
     */
    where: TripWhereUniqueInput
    /**
     * In case the Trip found by the `where` argument doesn't exist, create a new Trip with this data.
     */
    create: XOR<TripCreateInput, TripUncheckedCreateInput>
    /**
     * In case the Trip was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TripUpdateInput, TripUncheckedUpdateInput>
  }


  /**
   * Trip delete
   */
  export type TripDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trip
     */
    select?: TripSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TripInclude<ExtArgs> | null
    /**
     * Filter which Trip to delete.
     */
    where: TripWhereUniqueInput
  }


  /**
   * Trip deleteMany
   */
  export type TripDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Trips to delete
     */
    where?: TripWhereInput
  }


  /**
   * Trip.locations
   */
  export type Trip$locationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInclude<ExtArgs> | null
    where?: LocationWhereInput
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    cursor?: LocationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }


  /**
   * Trip.users
   */
  export type Trip$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTrip
     */
    select?: UserTripSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserTripInclude<ExtArgs> | null
    where?: UserTripWhereInput
    orderBy?: UserTripOrderByWithRelationInput | UserTripOrderByWithRelationInput[]
    cursor?: UserTripWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserTripScalarFieldEnum | UserTripScalarFieldEnum[]
  }


  /**
   * Trip.TripLocation
   */
  export type Trip$TripLocationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TripLocation
     */
    select?: TripLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TripLocationInclude<ExtArgs> | null
    where?: TripLocationWhereInput
    orderBy?: TripLocationOrderByWithRelationInput | TripLocationOrderByWithRelationInput[]
    cursor?: TripLocationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TripLocationScalarFieldEnum | TripLocationScalarFieldEnum[]
  }


  /**
   * Trip without action
   */
  export type TripDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trip
     */
    select?: TripSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TripInclude<ExtArgs> | null
  }



  /**
   * Model Location
   */

  export type AggregateLocation = {
    _count: LocationCountAggregateOutputType | null
    _avg: LocationAvgAggregateOutputType | null
    _sum: LocationSumAggregateOutputType | null
    _min: LocationMinAggregateOutputType | null
    _max: LocationMaxAggregateOutputType | null
  }

  export type LocationAvgAggregateOutputType = {
    uuid: number | null
    type: number | null
    rating: number | null
    latitude: number | null
    longitude: number | null
    tripUuid: number | null
  }

  export type LocationSumAggregateOutputType = {
    uuid: number | null
    type: number | null
    rating: number | null
    latitude: number | null
    longitude: number | null
    tripUuid: number | null
  }

  export type LocationMinAggregateOutputType = {
    uuid: number | null
    name: string | null
    description: string | null
    type: number | null
    rating: number | null
    latitude: number | null
    longitude: number | null
    tripUuid: number | null
  }

  export type LocationMaxAggregateOutputType = {
    uuid: number | null
    name: string | null
    description: string | null
    type: number | null
    rating: number | null
    latitude: number | null
    longitude: number | null
    tripUuid: number | null
  }

  export type LocationCountAggregateOutputType = {
    uuid: number
    name: number
    description: number
    type: number
    rating: number
    latitude: number
    longitude: number
    tripUuid: number
    _all: number
  }


  export type LocationAvgAggregateInputType = {
    uuid?: true
    type?: true
    rating?: true
    latitude?: true
    longitude?: true
    tripUuid?: true
  }

  export type LocationSumAggregateInputType = {
    uuid?: true
    type?: true
    rating?: true
    latitude?: true
    longitude?: true
    tripUuid?: true
  }

  export type LocationMinAggregateInputType = {
    uuid?: true
    name?: true
    description?: true
    type?: true
    rating?: true
    latitude?: true
    longitude?: true
    tripUuid?: true
  }

  export type LocationMaxAggregateInputType = {
    uuid?: true
    name?: true
    description?: true
    type?: true
    rating?: true
    latitude?: true
    longitude?: true
    tripUuid?: true
  }

  export type LocationCountAggregateInputType = {
    uuid?: true
    name?: true
    description?: true
    type?: true
    rating?: true
    latitude?: true
    longitude?: true
    tripUuid?: true
    _all?: true
  }

  export type LocationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Location to aggregate.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Locations
    **/
    _count?: true | LocationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LocationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LocationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LocationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LocationMaxAggregateInputType
  }

  export type GetLocationAggregateType<T extends LocationAggregateArgs> = {
        [P in keyof T & keyof AggregateLocation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLocation[P]>
      : GetScalarType<T[P], AggregateLocation[P]>
  }




  export type LocationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LocationWhereInput
    orderBy?: LocationOrderByWithAggregationInput | LocationOrderByWithAggregationInput[]
    by: LocationScalarFieldEnum[] | LocationScalarFieldEnum
    having?: LocationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LocationCountAggregateInputType | true
    _avg?: LocationAvgAggregateInputType
    _sum?: LocationSumAggregateInputType
    _min?: LocationMinAggregateInputType
    _max?: LocationMaxAggregateInputType
  }

  export type LocationGroupByOutputType = {
    uuid: number
    name: string
    description: string
    type: number
    rating: number
    latitude: number
    longitude: number
    tripUuid: number | null
    _count: LocationCountAggregateOutputType | null
    _avg: LocationAvgAggregateOutputType | null
    _sum: LocationSumAggregateOutputType | null
    _min: LocationMinAggregateOutputType | null
    _max: LocationMaxAggregateOutputType | null
  }

  type GetLocationGroupByPayload<T extends LocationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LocationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LocationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LocationGroupByOutputType[P]>
            : GetScalarType<T[P], LocationGroupByOutputType[P]>
        }
      >
    >


  export type LocationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    uuid?: boolean
    name?: boolean
    description?: boolean
    type?: boolean
    rating?: boolean
    latitude?: boolean
    longitude?: boolean
    tripUuid?: boolean
    photos?: boolean | Location$photosArgs<ExtArgs>
    trips?: boolean | Location$tripsArgs<ExtArgs>
    Trip?: boolean | Location$TripArgs<ExtArgs>
    _count?: boolean | LocationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["location"]>

  export type LocationSelectScalar = {
    uuid?: boolean
    name?: boolean
    description?: boolean
    type?: boolean
    rating?: boolean
    latitude?: boolean
    longitude?: boolean
    tripUuid?: boolean
  }

  export type LocationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    photos?: boolean | Location$photosArgs<ExtArgs>
    trips?: boolean | Location$tripsArgs<ExtArgs>
    Trip?: boolean | Location$TripArgs<ExtArgs>
    _count?: boolean | LocationCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $LocationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Location"
    objects: {
      photos: Prisma.$PhotoPayload<ExtArgs>[]
      trips: Prisma.$TripLocationPayload<ExtArgs>[]
      Trip: Prisma.$TripPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      uuid: number
      name: string
      description: string
      type: number
      rating: number
      latitude: number
      longitude: number
      tripUuid: number | null
    }, ExtArgs["result"]["location"]>
    composites: {}
  }


  type LocationGetPayload<S extends boolean | null | undefined | LocationDefaultArgs> = $Result.GetResult<Prisma.$LocationPayload, S>

  type LocationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LocationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LocationCountAggregateInputType | true
    }

  export interface LocationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Location'], meta: { name: 'Location' } }
    /**
     * Find zero or one Location that matches the filter.
     * @param {LocationFindUniqueArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LocationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, LocationFindUniqueArgs<ExtArgs>>
    ): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Location that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LocationFindUniqueOrThrowArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LocationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LocationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Location that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindFirstArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LocationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, LocationFindFirstArgs<ExtArgs>>
    ): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Location that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindFirstOrThrowArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LocationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LocationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Locations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Locations
     * const locations = await prisma.location.findMany()
     * 
     * // Get first 10 Locations
     * const locations = await prisma.location.findMany({ take: 10 })
     * 
     * // Only select the `uuid`
     * const locationWithUuidOnly = await prisma.location.findMany({ select: { uuid: true } })
     * 
    **/
    findMany<T extends LocationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LocationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Location.
     * @param {LocationCreateArgs} args - Arguments to create a Location.
     * @example
     * // Create one Location
     * const Location = await prisma.location.create({
     *   data: {
     *     // ... data to create a Location
     *   }
     * })
     * 
    **/
    create<T extends LocationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, LocationCreateArgs<ExtArgs>>
    ): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Locations.
     *     @param {LocationCreateManyArgs} args - Arguments to create many Locations.
     *     @example
     *     // Create many Locations
     *     const location = await prisma.location.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LocationCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LocationCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Location.
     * @param {LocationDeleteArgs} args - Arguments to delete one Location.
     * @example
     * // Delete one Location
     * const Location = await prisma.location.delete({
     *   where: {
     *     // ... filter to delete one Location
     *   }
     * })
     * 
    **/
    delete<T extends LocationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, LocationDeleteArgs<ExtArgs>>
    ): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Location.
     * @param {LocationUpdateArgs} args - Arguments to update one Location.
     * @example
     * // Update one Location
     * const location = await prisma.location.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LocationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, LocationUpdateArgs<ExtArgs>>
    ): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Locations.
     * @param {LocationDeleteManyArgs} args - Arguments to filter Locations to delete.
     * @example
     * // Delete a few Locations
     * const { count } = await prisma.location.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LocationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LocationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Locations
     * const location = await prisma.location.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LocationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, LocationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Location.
     * @param {LocationUpsertArgs} args - Arguments to update or create a Location.
     * @example
     * // Update or create a Location
     * const location = await prisma.location.upsert({
     *   create: {
     *     // ... data to create a Location
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Location we want to update
     *   }
     * })
    **/
    upsert<T extends LocationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, LocationUpsertArgs<ExtArgs>>
    ): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationCountArgs} args - Arguments to filter Locations to count.
     * @example
     * // Count the number of Locations
     * const count = await prisma.location.count({
     *   where: {
     *     // ... the filter for the Locations we want to count
     *   }
     * })
    **/
    count<T extends LocationCountArgs>(
      args?: Subset<T, LocationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LocationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Location.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LocationAggregateArgs>(args: Subset<T, LocationAggregateArgs>): Prisma.PrismaPromise<GetLocationAggregateType<T>>

    /**
     * Group by Location.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LocationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LocationGroupByArgs['orderBy'] }
        : { orderBy?: LocationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LocationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLocationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Location model
   */
  readonly fields: LocationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Location.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LocationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    photos<T extends Location$photosArgs<ExtArgs> = {}>(args?: Subset<T, Location$photosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PhotoPayload<ExtArgs>, T, 'findMany'> | Null>;

    trips<T extends Location$tripsArgs<ExtArgs> = {}>(args?: Subset<T, Location$tripsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TripLocationPayload<ExtArgs>, T, 'findMany'> | Null>;

    Trip<T extends Location$TripArgs<ExtArgs> = {}>(args?: Subset<T, Location$TripArgs<ExtArgs>>): Prisma__TripClient<$Result.GetResult<Prisma.$TripPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Location model
   */ 
  interface LocationFieldRefs {
    readonly uuid: FieldRef<"Location", 'Int'>
    readonly name: FieldRef<"Location", 'String'>
    readonly description: FieldRef<"Location", 'String'>
    readonly type: FieldRef<"Location", 'Int'>
    readonly rating: FieldRef<"Location", 'Int'>
    readonly latitude: FieldRef<"Location", 'Float'>
    readonly longitude: FieldRef<"Location", 'Float'>
    readonly tripUuid: FieldRef<"Location", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Location findUnique
   */
  export type LocationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where: LocationWhereUniqueInput
  }


  /**
   * Location findUniqueOrThrow
   */
  export type LocationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where: LocationWhereUniqueInput
  }


  /**
   * Location findFirst
   */
  export type LocationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Locations.
     */
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }


  /**
   * Location findFirstOrThrow
   */
  export type LocationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Locations.
     */
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }


  /**
   * Location findMany
   */
  export type LocationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Locations to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }


  /**
   * Location create
   */
  export type LocationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The data needed to create a Location.
     */
    data: XOR<LocationCreateInput, LocationUncheckedCreateInput>
  }


  /**
   * Location createMany
   */
  export type LocationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Locations.
     */
    data: LocationCreateManyInput | LocationCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Location update
   */
  export type LocationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The data needed to update a Location.
     */
    data: XOR<LocationUpdateInput, LocationUncheckedUpdateInput>
    /**
     * Choose, which Location to update.
     */
    where: LocationWhereUniqueInput
  }


  /**
   * Location updateMany
   */
  export type LocationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Locations.
     */
    data: XOR<LocationUpdateManyMutationInput, LocationUncheckedUpdateManyInput>
    /**
     * Filter which Locations to update
     */
    where?: LocationWhereInput
  }


  /**
   * Location upsert
   */
  export type LocationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The filter to search for the Location to update in case it exists.
     */
    where: LocationWhereUniqueInput
    /**
     * In case the Location found by the `where` argument doesn't exist, create a new Location with this data.
     */
    create: XOR<LocationCreateInput, LocationUncheckedCreateInput>
    /**
     * In case the Location was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LocationUpdateInput, LocationUncheckedUpdateInput>
  }


  /**
   * Location delete
   */
  export type LocationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter which Location to delete.
     */
    where: LocationWhereUniqueInput
  }


  /**
   * Location deleteMany
   */
  export type LocationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Locations to delete
     */
    where?: LocationWhereInput
  }


  /**
   * Location.photos
   */
  export type Location$photosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Photo
     */
    select?: PhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PhotoInclude<ExtArgs> | null
    where?: PhotoWhereInput
    orderBy?: PhotoOrderByWithRelationInput | PhotoOrderByWithRelationInput[]
    cursor?: PhotoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PhotoScalarFieldEnum | PhotoScalarFieldEnum[]
  }


  /**
   * Location.trips
   */
  export type Location$tripsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TripLocation
     */
    select?: TripLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TripLocationInclude<ExtArgs> | null
    where?: TripLocationWhereInput
    orderBy?: TripLocationOrderByWithRelationInput | TripLocationOrderByWithRelationInput[]
    cursor?: TripLocationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TripLocationScalarFieldEnum | TripLocationScalarFieldEnum[]
  }


  /**
   * Location.Trip
   */
  export type Location$TripArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trip
     */
    select?: TripSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TripInclude<ExtArgs> | null
    where?: TripWhereInput
  }


  /**
   * Location without action
   */
  export type LocationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInclude<ExtArgs> | null
  }



  /**
   * Model LocationType
   */

  export type AggregateLocationType = {
    _count: LocationTypeCountAggregateOutputType | null
    _avg: LocationTypeAvgAggregateOutputType | null
    _sum: LocationTypeSumAggregateOutputType | null
    _min: LocationTypeMinAggregateOutputType | null
    _max: LocationTypeMaxAggregateOutputType | null
  }

  export type LocationTypeAvgAggregateOutputType = {
    uuid: number | null
  }

  export type LocationTypeSumAggregateOutputType = {
    uuid: number | null
  }

  export type LocationTypeMinAggregateOutputType = {
    uuid: number | null
    name: string | null
  }

  export type LocationTypeMaxAggregateOutputType = {
    uuid: number | null
    name: string | null
  }

  export type LocationTypeCountAggregateOutputType = {
    uuid: number
    name: number
    _all: number
  }


  export type LocationTypeAvgAggregateInputType = {
    uuid?: true
  }

  export type LocationTypeSumAggregateInputType = {
    uuid?: true
  }

  export type LocationTypeMinAggregateInputType = {
    uuid?: true
    name?: true
  }

  export type LocationTypeMaxAggregateInputType = {
    uuid?: true
    name?: true
  }

  export type LocationTypeCountAggregateInputType = {
    uuid?: true
    name?: true
    _all?: true
  }

  export type LocationTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LocationType to aggregate.
     */
    where?: LocationTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LocationTypes to fetch.
     */
    orderBy?: LocationTypeOrderByWithRelationInput | LocationTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LocationTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LocationTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LocationTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LocationTypes
    **/
    _count?: true | LocationTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LocationTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LocationTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LocationTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LocationTypeMaxAggregateInputType
  }

  export type GetLocationTypeAggregateType<T extends LocationTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateLocationType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLocationType[P]>
      : GetScalarType<T[P], AggregateLocationType[P]>
  }




  export type LocationTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LocationTypeWhereInput
    orderBy?: LocationTypeOrderByWithAggregationInput | LocationTypeOrderByWithAggregationInput[]
    by: LocationTypeScalarFieldEnum[] | LocationTypeScalarFieldEnum
    having?: LocationTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LocationTypeCountAggregateInputType | true
    _avg?: LocationTypeAvgAggregateInputType
    _sum?: LocationTypeSumAggregateInputType
    _min?: LocationTypeMinAggregateInputType
    _max?: LocationTypeMaxAggregateInputType
  }

  export type LocationTypeGroupByOutputType = {
    uuid: number
    name: string
    _count: LocationTypeCountAggregateOutputType | null
    _avg: LocationTypeAvgAggregateOutputType | null
    _sum: LocationTypeSumAggregateOutputType | null
    _min: LocationTypeMinAggregateOutputType | null
    _max: LocationTypeMaxAggregateOutputType | null
  }

  type GetLocationTypeGroupByPayload<T extends LocationTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LocationTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LocationTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LocationTypeGroupByOutputType[P]>
            : GetScalarType<T[P], LocationTypeGroupByOutputType[P]>
        }
      >
    >


  export type LocationTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    uuid?: boolean
    name?: boolean
  }, ExtArgs["result"]["locationType"]>

  export type LocationTypeSelectScalar = {
    uuid?: boolean
    name?: boolean
  }


  export type $LocationTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LocationType"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      uuid: number
      name: string
    }, ExtArgs["result"]["locationType"]>
    composites: {}
  }


  type LocationTypeGetPayload<S extends boolean | null | undefined | LocationTypeDefaultArgs> = $Result.GetResult<Prisma.$LocationTypePayload, S>

  type LocationTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LocationTypeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LocationTypeCountAggregateInputType | true
    }

  export interface LocationTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LocationType'], meta: { name: 'LocationType' } }
    /**
     * Find zero or one LocationType that matches the filter.
     * @param {LocationTypeFindUniqueArgs} args - Arguments to find a LocationType
     * @example
     * // Get one LocationType
     * const locationType = await prisma.locationType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LocationTypeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, LocationTypeFindUniqueArgs<ExtArgs>>
    ): Prisma__LocationTypeClient<$Result.GetResult<Prisma.$LocationTypePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one LocationType that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LocationTypeFindUniqueOrThrowArgs} args - Arguments to find a LocationType
     * @example
     * // Get one LocationType
     * const locationType = await prisma.locationType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LocationTypeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LocationTypeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__LocationTypeClient<$Result.GetResult<Prisma.$LocationTypePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first LocationType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationTypeFindFirstArgs} args - Arguments to find a LocationType
     * @example
     * // Get one LocationType
     * const locationType = await prisma.locationType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LocationTypeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, LocationTypeFindFirstArgs<ExtArgs>>
    ): Prisma__LocationTypeClient<$Result.GetResult<Prisma.$LocationTypePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first LocationType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationTypeFindFirstOrThrowArgs} args - Arguments to find a LocationType
     * @example
     * // Get one LocationType
     * const locationType = await prisma.locationType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LocationTypeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LocationTypeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__LocationTypeClient<$Result.GetResult<Prisma.$LocationTypePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more LocationTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationTypeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LocationTypes
     * const locationTypes = await prisma.locationType.findMany()
     * 
     * // Get first 10 LocationTypes
     * const locationTypes = await prisma.locationType.findMany({ take: 10 })
     * 
     * // Only select the `uuid`
     * const locationTypeWithUuidOnly = await prisma.locationType.findMany({ select: { uuid: true } })
     * 
    **/
    findMany<T extends LocationTypeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LocationTypeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationTypePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a LocationType.
     * @param {LocationTypeCreateArgs} args - Arguments to create a LocationType.
     * @example
     * // Create one LocationType
     * const LocationType = await prisma.locationType.create({
     *   data: {
     *     // ... data to create a LocationType
     *   }
     * })
     * 
    **/
    create<T extends LocationTypeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, LocationTypeCreateArgs<ExtArgs>>
    ): Prisma__LocationTypeClient<$Result.GetResult<Prisma.$LocationTypePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many LocationTypes.
     *     @param {LocationTypeCreateManyArgs} args - Arguments to create many LocationTypes.
     *     @example
     *     // Create many LocationTypes
     *     const locationType = await prisma.locationType.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LocationTypeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LocationTypeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a LocationType.
     * @param {LocationTypeDeleteArgs} args - Arguments to delete one LocationType.
     * @example
     * // Delete one LocationType
     * const LocationType = await prisma.locationType.delete({
     *   where: {
     *     // ... filter to delete one LocationType
     *   }
     * })
     * 
    **/
    delete<T extends LocationTypeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, LocationTypeDeleteArgs<ExtArgs>>
    ): Prisma__LocationTypeClient<$Result.GetResult<Prisma.$LocationTypePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one LocationType.
     * @param {LocationTypeUpdateArgs} args - Arguments to update one LocationType.
     * @example
     * // Update one LocationType
     * const locationType = await prisma.locationType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LocationTypeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, LocationTypeUpdateArgs<ExtArgs>>
    ): Prisma__LocationTypeClient<$Result.GetResult<Prisma.$LocationTypePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more LocationTypes.
     * @param {LocationTypeDeleteManyArgs} args - Arguments to filter LocationTypes to delete.
     * @example
     * // Delete a few LocationTypes
     * const { count } = await prisma.locationType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LocationTypeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LocationTypeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LocationTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LocationTypes
     * const locationType = await prisma.locationType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LocationTypeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, LocationTypeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LocationType.
     * @param {LocationTypeUpsertArgs} args - Arguments to update or create a LocationType.
     * @example
     * // Update or create a LocationType
     * const locationType = await prisma.locationType.upsert({
     *   create: {
     *     // ... data to create a LocationType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LocationType we want to update
     *   }
     * })
    **/
    upsert<T extends LocationTypeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, LocationTypeUpsertArgs<ExtArgs>>
    ): Prisma__LocationTypeClient<$Result.GetResult<Prisma.$LocationTypePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of LocationTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationTypeCountArgs} args - Arguments to filter LocationTypes to count.
     * @example
     * // Count the number of LocationTypes
     * const count = await prisma.locationType.count({
     *   where: {
     *     // ... the filter for the LocationTypes we want to count
     *   }
     * })
    **/
    count<T extends LocationTypeCountArgs>(
      args?: Subset<T, LocationTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LocationTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LocationType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LocationTypeAggregateArgs>(args: Subset<T, LocationTypeAggregateArgs>): Prisma.PrismaPromise<GetLocationTypeAggregateType<T>>

    /**
     * Group by LocationType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LocationTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LocationTypeGroupByArgs['orderBy'] }
        : { orderBy?: LocationTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LocationTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLocationTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LocationType model
   */
  readonly fields: LocationTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LocationType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LocationTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the LocationType model
   */ 
  interface LocationTypeFieldRefs {
    readonly uuid: FieldRef<"LocationType", 'Int'>
    readonly name: FieldRef<"LocationType", 'String'>
  }
    

  // Custom InputTypes

  /**
   * LocationType findUnique
   */
  export type LocationTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationType
     */
    select?: LocationTypeSelect<ExtArgs> | null
    /**
     * Filter, which LocationType to fetch.
     */
    where: LocationTypeWhereUniqueInput
  }


  /**
   * LocationType findUniqueOrThrow
   */
  export type LocationTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationType
     */
    select?: LocationTypeSelect<ExtArgs> | null
    /**
     * Filter, which LocationType to fetch.
     */
    where: LocationTypeWhereUniqueInput
  }


  /**
   * LocationType findFirst
   */
  export type LocationTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationType
     */
    select?: LocationTypeSelect<ExtArgs> | null
    /**
     * Filter, which LocationType to fetch.
     */
    where?: LocationTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LocationTypes to fetch.
     */
    orderBy?: LocationTypeOrderByWithRelationInput | LocationTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LocationTypes.
     */
    cursor?: LocationTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LocationTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LocationTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LocationTypes.
     */
    distinct?: LocationTypeScalarFieldEnum | LocationTypeScalarFieldEnum[]
  }


  /**
   * LocationType findFirstOrThrow
   */
  export type LocationTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationType
     */
    select?: LocationTypeSelect<ExtArgs> | null
    /**
     * Filter, which LocationType to fetch.
     */
    where?: LocationTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LocationTypes to fetch.
     */
    orderBy?: LocationTypeOrderByWithRelationInput | LocationTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LocationTypes.
     */
    cursor?: LocationTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LocationTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LocationTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LocationTypes.
     */
    distinct?: LocationTypeScalarFieldEnum | LocationTypeScalarFieldEnum[]
  }


  /**
   * LocationType findMany
   */
  export type LocationTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationType
     */
    select?: LocationTypeSelect<ExtArgs> | null
    /**
     * Filter, which LocationTypes to fetch.
     */
    where?: LocationTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LocationTypes to fetch.
     */
    orderBy?: LocationTypeOrderByWithRelationInput | LocationTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LocationTypes.
     */
    cursor?: LocationTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LocationTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LocationTypes.
     */
    skip?: number
    distinct?: LocationTypeScalarFieldEnum | LocationTypeScalarFieldEnum[]
  }


  /**
   * LocationType create
   */
  export type LocationTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationType
     */
    select?: LocationTypeSelect<ExtArgs> | null
    /**
     * The data needed to create a LocationType.
     */
    data: XOR<LocationTypeCreateInput, LocationTypeUncheckedCreateInput>
  }


  /**
   * LocationType createMany
   */
  export type LocationTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LocationTypes.
     */
    data: LocationTypeCreateManyInput | LocationTypeCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * LocationType update
   */
  export type LocationTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationType
     */
    select?: LocationTypeSelect<ExtArgs> | null
    /**
     * The data needed to update a LocationType.
     */
    data: XOR<LocationTypeUpdateInput, LocationTypeUncheckedUpdateInput>
    /**
     * Choose, which LocationType to update.
     */
    where: LocationTypeWhereUniqueInput
  }


  /**
   * LocationType updateMany
   */
  export type LocationTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LocationTypes.
     */
    data: XOR<LocationTypeUpdateManyMutationInput, LocationTypeUncheckedUpdateManyInput>
    /**
     * Filter which LocationTypes to update
     */
    where?: LocationTypeWhereInput
  }


  /**
   * LocationType upsert
   */
  export type LocationTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationType
     */
    select?: LocationTypeSelect<ExtArgs> | null
    /**
     * The filter to search for the LocationType to update in case it exists.
     */
    where: LocationTypeWhereUniqueInput
    /**
     * In case the LocationType found by the `where` argument doesn't exist, create a new LocationType with this data.
     */
    create: XOR<LocationTypeCreateInput, LocationTypeUncheckedCreateInput>
    /**
     * In case the LocationType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LocationTypeUpdateInput, LocationTypeUncheckedUpdateInput>
  }


  /**
   * LocationType delete
   */
  export type LocationTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationType
     */
    select?: LocationTypeSelect<ExtArgs> | null
    /**
     * Filter which LocationType to delete.
     */
    where: LocationTypeWhereUniqueInput
  }


  /**
   * LocationType deleteMany
   */
  export type LocationTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LocationTypes to delete
     */
    where?: LocationTypeWhereInput
  }


  /**
   * LocationType without action
   */
  export type LocationTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationType
     */
    select?: LocationTypeSelect<ExtArgs> | null
  }



  /**
   * Model Photo
   */

  export type AggregatePhoto = {
    _count: PhotoCountAggregateOutputType | null
    _avg: PhotoAvgAggregateOutputType | null
    _sum: PhotoSumAggregateOutputType | null
    _min: PhotoMinAggregateOutputType | null
    _max: PhotoMaxAggregateOutputType | null
  }

  export type PhotoAvgAggregateOutputType = {
    uuid: number | null
    locationId: number | null
  }

  export type PhotoSumAggregateOutputType = {
    uuid: number | null
    locationId: number | null
  }

  export type PhotoMinAggregateOutputType = {
    uuid: number | null
    url: string | null
    locationId: number | null
  }

  export type PhotoMaxAggregateOutputType = {
    uuid: number | null
    url: string | null
    locationId: number | null
  }

  export type PhotoCountAggregateOutputType = {
    uuid: number
    url: number
    locationId: number
    _all: number
  }


  export type PhotoAvgAggregateInputType = {
    uuid?: true
    locationId?: true
  }

  export type PhotoSumAggregateInputType = {
    uuid?: true
    locationId?: true
  }

  export type PhotoMinAggregateInputType = {
    uuid?: true
    url?: true
    locationId?: true
  }

  export type PhotoMaxAggregateInputType = {
    uuid?: true
    url?: true
    locationId?: true
  }

  export type PhotoCountAggregateInputType = {
    uuid?: true
    url?: true
    locationId?: true
    _all?: true
  }

  export type PhotoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Photo to aggregate.
     */
    where?: PhotoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Photos to fetch.
     */
    orderBy?: PhotoOrderByWithRelationInput | PhotoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PhotoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Photos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Photos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Photos
    **/
    _count?: true | PhotoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PhotoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PhotoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PhotoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PhotoMaxAggregateInputType
  }

  export type GetPhotoAggregateType<T extends PhotoAggregateArgs> = {
        [P in keyof T & keyof AggregatePhoto]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePhoto[P]>
      : GetScalarType<T[P], AggregatePhoto[P]>
  }




  export type PhotoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PhotoWhereInput
    orderBy?: PhotoOrderByWithAggregationInput | PhotoOrderByWithAggregationInput[]
    by: PhotoScalarFieldEnum[] | PhotoScalarFieldEnum
    having?: PhotoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PhotoCountAggregateInputType | true
    _avg?: PhotoAvgAggregateInputType
    _sum?: PhotoSumAggregateInputType
    _min?: PhotoMinAggregateInputType
    _max?: PhotoMaxAggregateInputType
  }

  export type PhotoGroupByOutputType = {
    uuid: number
    url: string
    locationId: number
    _count: PhotoCountAggregateOutputType | null
    _avg: PhotoAvgAggregateOutputType | null
    _sum: PhotoSumAggregateOutputType | null
    _min: PhotoMinAggregateOutputType | null
    _max: PhotoMaxAggregateOutputType | null
  }

  type GetPhotoGroupByPayload<T extends PhotoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PhotoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PhotoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PhotoGroupByOutputType[P]>
            : GetScalarType<T[P], PhotoGroupByOutputType[P]>
        }
      >
    >


  export type PhotoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    uuid?: boolean
    url?: boolean
    locationId?: boolean
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["photo"]>

  export type PhotoSelectScalar = {
    uuid?: boolean
    url?: boolean
    locationId?: boolean
  }

  export type PhotoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }


  export type $PhotoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Photo"
    objects: {
      location: Prisma.$LocationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      uuid: number
      url: string
      locationId: number
    }, ExtArgs["result"]["photo"]>
    composites: {}
  }


  type PhotoGetPayload<S extends boolean | null | undefined | PhotoDefaultArgs> = $Result.GetResult<Prisma.$PhotoPayload, S>

  type PhotoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PhotoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PhotoCountAggregateInputType | true
    }

  export interface PhotoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Photo'], meta: { name: 'Photo' } }
    /**
     * Find zero or one Photo that matches the filter.
     * @param {PhotoFindUniqueArgs} args - Arguments to find a Photo
     * @example
     * // Get one Photo
     * const photo = await prisma.photo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PhotoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PhotoFindUniqueArgs<ExtArgs>>
    ): Prisma__PhotoClient<$Result.GetResult<Prisma.$PhotoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Photo that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PhotoFindUniqueOrThrowArgs} args - Arguments to find a Photo
     * @example
     * // Get one Photo
     * const photo = await prisma.photo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PhotoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PhotoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PhotoClient<$Result.GetResult<Prisma.$PhotoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Photo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhotoFindFirstArgs} args - Arguments to find a Photo
     * @example
     * // Get one Photo
     * const photo = await prisma.photo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PhotoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PhotoFindFirstArgs<ExtArgs>>
    ): Prisma__PhotoClient<$Result.GetResult<Prisma.$PhotoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Photo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhotoFindFirstOrThrowArgs} args - Arguments to find a Photo
     * @example
     * // Get one Photo
     * const photo = await prisma.photo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PhotoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PhotoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PhotoClient<$Result.GetResult<Prisma.$PhotoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Photos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhotoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Photos
     * const photos = await prisma.photo.findMany()
     * 
     * // Get first 10 Photos
     * const photos = await prisma.photo.findMany({ take: 10 })
     * 
     * // Only select the `uuid`
     * const photoWithUuidOnly = await prisma.photo.findMany({ select: { uuid: true } })
     * 
    **/
    findMany<T extends PhotoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PhotoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PhotoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Photo.
     * @param {PhotoCreateArgs} args - Arguments to create a Photo.
     * @example
     * // Create one Photo
     * const Photo = await prisma.photo.create({
     *   data: {
     *     // ... data to create a Photo
     *   }
     * })
     * 
    **/
    create<T extends PhotoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PhotoCreateArgs<ExtArgs>>
    ): Prisma__PhotoClient<$Result.GetResult<Prisma.$PhotoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Photos.
     *     @param {PhotoCreateManyArgs} args - Arguments to create many Photos.
     *     @example
     *     // Create many Photos
     *     const photo = await prisma.photo.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PhotoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PhotoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Photo.
     * @param {PhotoDeleteArgs} args - Arguments to delete one Photo.
     * @example
     * // Delete one Photo
     * const Photo = await prisma.photo.delete({
     *   where: {
     *     // ... filter to delete one Photo
     *   }
     * })
     * 
    **/
    delete<T extends PhotoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PhotoDeleteArgs<ExtArgs>>
    ): Prisma__PhotoClient<$Result.GetResult<Prisma.$PhotoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Photo.
     * @param {PhotoUpdateArgs} args - Arguments to update one Photo.
     * @example
     * // Update one Photo
     * const photo = await prisma.photo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PhotoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PhotoUpdateArgs<ExtArgs>>
    ): Prisma__PhotoClient<$Result.GetResult<Prisma.$PhotoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Photos.
     * @param {PhotoDeleteManyArgs} args - Arguments to filter Photos to delete.
     * @example
     * // Delete a few Photos
     * const { count } = await prisma.photo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PhotoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PhotoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Photos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhotoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Photos
     * const photo = await prisma.photo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PhotoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PhotoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Photo.
     * @param {PhotoUpsertArgs} args - Arguments to update or create a Photo.
     * @example
     * // Update or create a Photo
     * const photo = await prisma.photo.upsert({
     *   create: {
     *     // ... data to create a Photo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Photo we want to update
     *   }
     * })
    **/
    upsert<T extends PhotoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PhotoUpsertArgs<ExtArgs>>
    ): Prisma__PhotoClient<$Result.GetResult<Prisma.$PhotoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Photos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhotoCountArgs} args - Arguments to filter Photos to count.
     * @example
     * // Count the number of Photos
     * const count = await prisma.photo.count({
     *   where: {
     *     // ... the filter for the Photos we want to count
     *   }
     * })
    **/
    count<T extends PhotoCountArgs>(
      args?: Subset<T, PhotoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PhotoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Photo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhotoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PhotoAggregateArgs>(args: Subset<T, PhotoAggregateArgs>): Prisma.PrismaPromise<GetPhotoAggregateType<T>>

    /**
     * Group by Photo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhotoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PhotoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PhotoGroupByArgs['orderBy'] }
        : { orderBy?: PhotoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PhotoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPhotoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Photo model
   */
  readonly fields: PhotoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Photo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PhotoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    location<T extends LocationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LocationDefaultArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Photo model
   */ 
  interface PhotoFieldRefs {
    readonly uuid: FieldRef<"Photo", 'Int'>
    readonly url: FieldRef<"Photo", 'String'>
    readonly locationId: FieldRef<"Photo", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Photo findUnique
   */
  export type PhotoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Photo
     */
    select?: PhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PhotoInclude<ExtArgs> | null
    /**
     * Filter, which Photo to fetch.
     */
    where: PhotoWhereUniqueInput
  }


  /**
   * Photo findUniqueOrThrow
   */
  export type PhotoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Photo
     */
    select?: PhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PhotoInclude<ExtArgs> | null
    /**
     * Filter, which Photo to fetch.
     */
    where: PhotoWhereUniqueInput
  }


  /**
   * Photo findFirst
   */
  export type PhotoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Photo
     */
    select?: PhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PhotoInclude<ExtArgs> | null
    /**
     * Filter, which Photo to fetch.
     */
    where?: PhotoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Photos to fetch.
     */
    orderBy?: PhotoOrderByWithRelationInput | PhotoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Photos.
     */
    cursor?: PhotoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Photos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Photos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Photos.
     */
    distinct?: PhotoScalarFieldEnum | PhotoScalarFieldEnum[]
  }


  /**
   * Photo findFirstOrThrow
   */
  export type PhotoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Photo
     */
    select?: PhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PhotoInclude<ExtArgs> | null
    /**
     * Filter, which Photo to fetch.
     */
    where?: PhotoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Photos to fetch.
     */
    orderBy?: PhotoOrderByWithRelationInput | PhotoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Photos.
     */
    cursor?: PhotoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Photos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Photos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Photos.
     */
    distinct?: PhotoScalarFieldEnum | PhotoScalarFieldEnum[]
  }


  /**
   * Photo findMany
   */
  export type PhotoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Photo
     */
    select?: PhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PhotoInclude<ExtArgs> | null
    /**
     * Filter, which Photos to fetch.
     */
    where?: PhotoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Photos to fetch.
     */
    orderBy?: PhotoOrderByWithRelationInput | PhotoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Photos.
     */
    cursor?: PhotoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Photos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Photos.
     */
    skip?: number
    distinct?: PhotoScalarFieldEnum | PhotoScalarFieldEnum[]
  }


  /**
   * Photo create
   */
  export type PhotoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Photo
     */
    select?: PhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PhotoInclude<ExtArgs> | null
    /**
     * The data needed to create a Photo.
     */
    data: XOR<PhotoCreateInput, PhotoUncheckedCreateInput>
  }


  /**
   * Photo createMany
   */
  export type PhotoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Photos.
     */
    data: PhotoCreateManyInput | PhotoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Photo update
   */
  export type PhotoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Photo
     */
    select?: PhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PhotoInclude<ExtArgs> | null
    /**
     * The data needed to update a Photo.
     */
    data: XOR<PhotoUpdateInput, PhotoUncheckedUpdateInput>
    /**
     * Choose, which Photo to update.
     */
    where: PhotoWhereUniqueInput
  }


  /**
   * Photo updateMany
   */
  export type PhotoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Photos.
     */
    data: XOR<PhotoUpdateManyMutationInput, PhotoUncheckedUpdateManyInput>
    /**
     * Filter which Photos to update
     */
    where?: PhotoWhereInput
  }


  /**
   * Photo upsert
   */
  export type PhotoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Photo
     */
    select?: PhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PhotoInclude<ExtArgs> | null
    /**
     * The filter to search for the Photo to update in case it exists.
     */
    where: PhotoWhereUniqueInput
    /**
     * In case the Photo found by the `where` argument doesn't exist, create a new Photo with this data.
     */
    create: XOR<PhotoCreateInput, PhotoUncheckedCreateInput>
    /**
     * In case the Photo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PhotoUpdateInput, PhotoUncheckedUpdateInput>
  }


  /**
   * Photo delete
   */
  export type PhotoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Photo
     */
    select?: PhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PhotoInclude<ExtArgs> | null
    /**
     * Filter which Photo to delete.
     */
    where: PhotoWhereUniqueInput
  }


  /**
   * Photo deleteMany
   */
  export type PhotoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Photos to delete
     */
    where?: PhotoWhereInput
  }


  /**
   * Photo without action
   */
  export type PhotoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Photo
     */
    select?: PhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PhotoInclude<ExtArgs> | null
  }



  /**
   * Model TripLocation
   */

  export type AggregateTripLocation = {
    _count: TripLocationCountAggregateOutputType | null
    _avg: TripLocationAvgAggregateOutputType | null
    _sum: TripLocationSumAggregateOutputType | null
    _min: TripLocationMinAggregateOutputType | null
    _max: TripLocationMaxAggregateOutputType | null
  }

  export type TripLocationAvgAggregateOutputType = {
    tripId: number | null
    locationId: number | null
  }

  export type TripLocationSumAggregateOutputType = {
    tripId: number | null
    locationId: number | null
  }

  export type TripLocationMinAggregateOutputType = {
    tripId: number | null
    locationId: number | null
  }

  export type TripLocationMaxAggregateOutputType = {
    tripId: number | null
    locationId: number | null
  }

  export type TripLocationCountAggregateOutputType = {
    tripId: number
    locationId: number
    _all: number
  }


  export type TripLocationAvgAggregateInputType = {
    tripId?: true
    locationId?: true
  }

  export type TripLocationSumAggregateInputType = {
    tripId?: true
    locationId?: true
  }

  export type TripLocationMinAggregateInputType = {
    tripId?: true
    locationId?: true
  }

  export type TripLocationMaxAggregateInputType = {
    tripId?: true
    locationId?: true
  }

  export type TripLocationCountAggregateInputType = {
    tripId?: true
    locationId?: true
    _all?: true
  }

  export type TripLocationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TripLocation to aggregate.
     */
    where?: TripLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TripLocations to fetch.
     */
    orderBy?: TripLocationOrderByWithRelationInput | TripLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TripLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TripLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TripLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TripLocations
    **/
    _count?: true | TripLocationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TripLocationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TripLocationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TripLocationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TripLocationMaxAggregateInputType
  }

  export type GetTripLocationAggregateType<T extends TripLocationAggregateArgs> = {
        [P in keyof T & keyof AggregateTripLocation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTripLocation[P]>
      : GetScalarType<T[P], AggregateTripLocation[P]>
  }




  export type TripLocationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TripLocationWhereInput
    orderBy?: TripLocationOrderByWithAggregationInput | TripLocationOrderByWithAggregationInput[]
    by: TripLocationScalarFieldEnum[] | TripLocationScalarFieldEnum
    having?: TripLocationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TripLocationCountAggregateInputType | true
    _avg?: TripLocationAvgAggregateInputType
    _sum?: TripLocationSumAggregateInputType
    _min?: TripLocationMinAggregateInputType
    _max?: TripLocationMaxAggregateInputType
  }

  export type TripLocationGroupByOutputType = {
    tripId: number
    locationId: number
    _count: TripLocationCountAggregateOutputType | null
    _avg: TripLocationAvgAggregateOutputType | null
    _sum: TripLocationSumAggregateOutputType | null
    _min: TripLocationMinAggregateOutputType | null
    _max: TripLocationMaxAggregateOutputType | null
  }

  type GetTripLocationGroupByPayload<T extends TripLocationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TripLocationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TripLocationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TripLocationGroupByOutputType[P]>
            : GetScalarType<T[P], TripLocationGroupByOutputType[P]>
        }
      >
    >


  export type TripLocationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    tripId?: boolean
    locationId?: boolean
    trip?: boolean | TripDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tripLocation"]>

  export type TripLocationSelectScalar = {
    tripId?: boolean
    locationId?: boolean
  }

  export type TripLocationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    trip?: boolean | TripDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }


  export type $TripLocationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TripLocation"
    objects: {
      trip: Prisma.$TripPayload<ExtArgs>
      location: Prisma.$LocationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      tripId: number
      locationId: number
    }, ExtArgs["result"]["tripLocation"]>
    composites: {}
  }


  type TripLocationGetPayload<S extends boolean | null | undefined | TripLocationDefaultArgs> = $Result.GetResult<Prisma.$TripLocationPayload, S>

  type TripLocationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TripLocationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TripLocationCountAggregateInputType | true
    }

  export interface TripLocationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TripLocation'], meta: { name: 'TripLocation' } }
    /**
     * Find zero or one TripLocation that matches the filter.
     * @param {TripLocationFindUniqueArgs} args - Arguments to find a TripLocation
     * @example
     * // Get one TripLocation
     * const tripLocation = await prisma.tripLocation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TripLocationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TripLocationFindUniqueArgs<ExtArgs>>
    ): Prisma__TripLocationClient<$Result.GetResult<Prisma.$TripLocationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one TripLocation that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TripLocationFindUniqueOrThrowArgs} args - Arguments to find a TripLocation
     * @example
     * // Get one TripLocation
     * const tripLocation = await prisma.tripLocation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TripLocationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TripLocationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TripLocationClient<$Result.GetResult<Prisma.$TripLocationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first TripLocation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TripLocationFindFirstArgs} args - Arguments to find a TripLocation
     * @example
     * // Get one TripLocation
     * const tripLocation = await prisma.tripLocation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TripLocationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TripLocationFindFirstArgs<ExtArgs>>
    ): Prisma__TripLocationClient<$Result.GetResult<Prisma.$TripLocationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first TripLocation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TripLocationFindFirstOrThrowArgs} args - Arguments to find a TripLocation
     * @example
     * // Get one TripLocation
     * const tripLocation = await prisma.tripLocation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TripLocationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TripLocationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TripLocationClient<$Result.GetResult<Prisma.$TripLocationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more TripLocations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TripLocationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TripLocations
     * const tripLocations = await prisma.tripLocation.findMany()
     * 
     * // Get first 10 TripLocations
     * const tripLocations = await prisma.tripLocation.findMany({ take: 10 })
     * 
     * // Only select the `tripId`
     * const tripLocationWithTripIdOnly = await prisma.tripLocation.findMany({ select: { tripId: true } })
     * 
    **/
    findMany<T extends TripLocationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TripLocationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TripLocationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a TripLocation.
     * @param {TripLocationCreateArgs} args - Arguments to create a TripLocation.
     * @example
     * // Create one TripLocation
     * const TripLocation = await prisma.tripLocation.create({
     *   data: {
     *     // ... data to create a TripLocation
     *   }
     * })
     * 
    **/
    create<T extends TripLocationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TripLocationCreateArgs<ExtArgs>>
    ): Prisma__TripLocationClient<$Result.GetResult<Prisma.$TripLocationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many TripLocations.
     *     @param {TripLocationCreateManyArgs} args - Arguments to create many TripLocations.
     *     @example
     *     // Create many TripLocations
     *     const tripLocation = await prisma.tripLocation.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TripLocationCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TripLocationCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TripLocation.
     * @param {TripLocationDeleteArgs} args - Arguments to delete one TripLocation.
     * @example
     * // Delete one TripLocation
     * const TripLocation = await prisma.tripLocation.delete({
     *   where: {
     *     // ... filter to delete one TripLocation
     *   }
     * })
     * 
    **/
    delete<T extends TripLocationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TripLocationDeleteArgs<ExtArgs>>
    ): Prisma__TripLocationClient<$Result.GetResult<Prisma.$TripLocationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one TripLocation.
     * @param {TripLocationUpdateArgs} args - Arguments to update one TripLocation.
     * @example
     * // Update one TripLocation
     * const tripLocation = await prisma.tripLocation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TripLocationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TripLocationUpdateArgs<ExtArgs>>
    ): Prisma__TripLocationClient<$Result.GetResult<Prisma.$TripLocationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more TripLocations.
     * @param {TripLocationDeleteManyArgs} args - Arguments to filter TripLocations to delete.
     * @example
     * // Delete a few TripLocations
     * const { count } = await prisma.tripLocation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TripLocationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TripLocationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TripLocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TripLocationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TripLocations
     * const tripLocation = await prisma.tripLocation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TripLocationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TripLocationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TripLocation.
     * @param {TripLocationUpsertArgs} args - Arguments to update or create a TripLocation.
     * @example
     * // Update or create a TripLocation
     * const tripLocation = await prisma.tripLocation.upsert({
     *   create: {
     *     // ... data to create a TripLocation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TripLocation we want to update
     *   }
     * })
    **/
    upsert<T extends TripLocationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TripLocationUpsertArgs<ExtArgs>>
    ): Prisma__TripLocationClient<$Result.GetResult<Prisma.$TripLocationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of TripLocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TripLocationCountArgs} args - Arguments to filter TripLocations to count.
     * @example
     * // Count the number of TripLocations
     * const count = await prisma.tripLocation.count({
     *   where: {
     *     // ... the filter for the TripLocations we want to count
     *   }
     * })
    **/
    count<T extends TripLocationCountArgs>(
      args?: Subset<T, TripLocationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TripLocationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TripLocation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TripLocationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TripLocationAggregateArgs>(args: Subset<T, TripLocationAggregateArgs>): Prisma.PrismaPromise<GetTripLocationAggregateType<T>>

    /**
     * Group by TripLocation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TripLocationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TripLocationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TripLocationGroupByArgs['orderBy'] }
        : { orderBy?: TripLocationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TripLocationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTripLocationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TripLocation model
   */
  readonly fields: TripLocationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TripLocation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TripLocationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    trip<T extends TripDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TripDefaultArgs<ExtArgs>>): Prisma__TripClient<$Result.GetResult<Prisma.$TripPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    location<T extends LocationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LocationDefaultArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the TripLocation model
   */ 
  interface TripLocationFieldRefs {
    readonly tripId: FieldRef<"TripLocation", 'Int'>
    readonly locationId: FieldRef<"TripLocation", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * TripLocation findUnique
   */
  export type TripLocationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TripLocation
     */
    select?: TripLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TripLocationInclude<ExtArgs> | null
    /**
     * Filter, which TripLocation to fetch.
     */
    where: TripLocationWhereUniqueInput
  }


  /**
   * TripLocation findUniqueOrThrow
   */
  export type TripLocationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TripLocation
     */
    select?: TripLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TripLocationInclude<ExtArgs> | null
    /**
     * Filter, which TripLocation to fetch.
     */
    where: TripLocationWhereUniqueInput
  }


  /**
   * TripLocation findFirst
   */
  export type TripLocationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TripLocation
     */
    select?: TripLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TripLocationInclude<ExtArgs> | null
    /**
     * Filter, which TripLocation to fetch.
     */
    where?: TripLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TripLocations to fetch.
     */
    orderBy?: TripLocationOrderByWithRelationInput | TripLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TripLocations.
     */
    cursor?: TripLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TripLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TripLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TripLocations.
     */
    distinct?: TripLocationScalarFieldEnum | TripLocationScalarFieldEnum[]
  }


  /**
   * TripLocation findFirstOrThrow
   */
  export type TripLocationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TripLocation
     */
    select?: TripLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TripLocationInclude<ExtArgs> | null
    /**
     * Filter, which TripLocation to fetch.
     */
    where?: TripLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TripLocations to fetch.
     */
    orderBy?: TripLocationOrderByWithRelationInput | TripLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TripLocations.
     */
    cursor?: TripLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TripLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TripLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TripLocations.
     */
    distinct?: TripLocationScalarFieldEnum | TripLocationScalarFieldEnum[]
  }


  /**
   * TripLocation findMany
   */
  export type TripLocationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TripLocation
     */
    select?: TripLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TripLocationInclude<ExtArgs> | null
    /**
     * Filter, which TripLocations to fetch.
     */
    where?: TripLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TripLocations to fetch.
     */
    orderBy?: TripLocationOrderByWithRelationInput | TripLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TripLocations.
     */
    cursor?: TripLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TripLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TripLocations.
     */
    skip?: number
    distinct?: TripLocationScalarFieldEnum | TripLocationScalarFieldEnum[]
  }


  /**
   * TripLocation create
   */
  export type TripLocationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TripLocation
     */
    select?: TripLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TripLocationInclude<ExtArgs> | null
    /**
     * The data needed to create a TripLocation.
     */
    data: XOR<TripLocationCreateInput, TripLocationUncheckedCreateInput>
  }


  /**
   * TripLocation createMany
   */
  export type TripLocationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TripLocations.
     */
    data: TripLocationCreateManyInput | TripLocationCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * TripLocation update
   */
  export type TripLocationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TripLocation
     */
    select?: TripLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TripLocationInclude<ExtArgs> | null
    /**
     * The data needed to update a TripLocation.
     */
    data: XOR<TripLocationUpdateInput, TripLocationUncheckedUpdateInput>
    /**
     * Choose, which TripLocation to update.
     */
    where: TripLocationWhereUniqueInput
  }


  /**
   * TripLocation updateMany
   */
  export type TripLocationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TripLocations.
     */
    data: XOR<TripLocationUpdateManyMutationInput, TripLocationUncheckedUpdateManyInput>
    /**
     * Filter which TripLocations to update
     */
    where?: TripLocationWhereInput
  }


  /**
   * TripLocation upsert
   */
  export type TripLocationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TripLocation
     */
    select?: TripLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TripLocationInclude<ExtArgs> | null
    /**
     * The filter to search for the TripLocation to update in case it exists.
     */
    where: TripLocationWhereUniqueInput
    /**
     * In case the TripLocation found by the `where` argument doesn't exist, create a new TripLocation with this data.
     */
    create: XOR<TripLocationCreateInput, TripLocationUncheckedCreateInput>
    /**
     * In case the TripLocation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TripLocationUpdateInput, TripLocationUncheckedUpdateInput>
  }


  /**
   * TripLocation delete
   */
  export type TripLocationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TripLocation
     */
    select?: TripLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TripLocationInclude<ExtArgs> | null
    /**
     * Filter which TripLocation to delete.
     */
    where: TripLocationWhereUniqueInput
  }


  /**
   * TripLocation deleteMany
   */
  export type TripLocationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TripLocations to delete
     */
    where?: TripLocationWhereInput
  }


  /**
   * TripLocation without action
   */
  export type TripLocationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TripLocation
     */
    select?: TripLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TripLocationInclude<ExtArgs> | null
  }



  /**
   * Model UserTrip
   */

  export type AggregateUserTrip = {
    _count: UserTripCountAggregateOutputType | null
    _avg: UserTripAvgAggregateOutputType | null
    _sum: UserTripSumAggregateOutputType | null
    _min: UserTripMinAggregateOutputType | null
    _max: UserTripMaxAggregateOutputType | null
  }

  export type UserTripAvgAggregateOutputType = {
    userId: number | null
    tripId: number | null
  }

  export type UserTripSumAggregateOutputType = {
    userId: number | null
    tripId: number | null
  }

  export type UserTripMinAggregateOutputType = {
    userId: number | null
    tripId: number | null
  }

  export type UserTripMaxAggregateOutputType = {
    userId: number | null
    tripId: number | null
  }

  export type UserTripCountAggregateOutputType = {
    userId: number
    tripId: number
    _all: number
  }


  export type UserTripAvgAggregateInputType = {
    userId?: true
    tripId?: true
  }

  export type UserTripSumAggregateInputType = {
    userId?: true
    tripId?: true
  }

  export type UserTripMinAggregateInputType = {
    userId?: true
    tripId?: true
  }

  export type UserTripMaxAggregateInputType = {
    userId?: true
    tripId?: true
  }

  export type UserTripCountAggregateInputType = {
    userId?: true
    tripId?: true
    _all?: true
  }

  export type UserTripAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserTrip to aggregate.
     */
    where?: UserTripWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserTrips to fetch.
     */
    orderBy?: UserTripOrderByWithRelationInput | UserTripOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserTripWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserTrips from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserTrips.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserTrips
    **/
    _count?: true | UserTripCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserTripAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserTripSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserTripMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserTripMaxAggregateInputType
  }

  export type GetUserTripAggregateType<T extends UserTripAggregateArgs> = {
        [P in keyof T & keyof AggregateUserTrip]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserTrip[P]>
      : GetScalarType<T[P], AggregateUserTrip[P]>
  }




  export type UserTripGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserTripWhereInput
    orderBy?: UserTripOrderByWithAggregationInput | UserTripOrderByWithAggregationInput[]
    by: UserTripScalarFieldEnum[] | UserTripScalarFieldEnum
    having?: UserTripScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserTripCountAggregateInputType | true
    _avg?: UserTripAvgAggregateInputType
    _sum?: UserTripSumAggregateInputType
    _min?: UserTripMinAggregateInputType
    _max?: UserTripMaxAggregateInputType
  }

  export type UserTripGroupByOutputType = {
    userId: number
    tripId: number
    _count: UserTripCountAggregateOutputType | null
    _avg: UserTripAvgAggregateOutputType | null
    _sum: UserTripSumAggregateOutputType | null
    _min: UserTripMinAggregateOutputType | null
    _max: UserTripMaxAggregateOutputType | null
  }

  type GetUserTripGroupByPayload<T extends UserTripGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserTripGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserTripGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserTripGroupByOutputType[P]>
            : GetScalarType<T[P], UserTripGroupByOutputType[P]>
        }
      >
    >


  export type UserTripSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    tripId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    trip?: boolean | TripDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userTrip"]>

  export type UserTripSelectScalar = {
    userId?: boolean
    tripId?: boolean
  }

  export type UserTripInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    trip?: boolean | TripDefaultArgs<ExtArgs>
  }


  export type $UserTripPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserTrip"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      trip: Prisma.$TripPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: number
      tripId: number
    }, ExtArgs["result"]["userTrip"]>
    composites: {}
  }


  type UserTripGetPayload<S extends boolean | null | undefined | UserTripDefaultArgs> = $Result.GetResult<Prisma.$UserTripPayload, S>

  type UserTripCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserTripFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserTripCountAggregateInputType | true
    }

  export interface UserTripDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserTrip'], meta: { name: 'UserTrip' } }
    /**
     * Find zero or one UserTrip that matches the filter.
     * @param {UserTripFindUniqueArgs} args - Arguments to find a UserTrip
     * @example
     * // Get one UserTrip
     * const userTrip = await prisma.userTrip.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserTripFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserTripFindUniqueArgs<ExtArgs>>
    ): Prisma__UserTripClient<$Result.GetResult<Prisma.$UserTripPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one UserTrip that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserTripFindUniqueOrThrowArgs} args - Arguments to find a UserTrip
     * @example
     * // Get one UserTrip
     * const userTrip = await prisma.userTrip.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserTripFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserTripFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserTripClient<$Result.GetResult<Prisma.$UserTripPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first UserTrip that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTripFindFirstArgs} args - Arguments to find a UserTrip
     * @example
     * // Get one UserTrip
     * const userTrip = await prisma.userTrip.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserTripFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserTripFindFirstArgs<ExtArgs>>
    ): Prisma__UserTripClient<$Result.GetResult<Prisma.$UserTripPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first UserTrip that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTripFindFirstOrThrowArgs} args - Arguments to find a UserTrip
     * @example
     * // Get one UserTrip
     * const userTrip = await prisma.userTrip.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserTripFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserTripFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserTripClient<$Result.GetResult<Prisma.$UserTripPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more UserTrips that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTripFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserTrips
     * const userTrips = await prisma.userTrip.findMany()
     * 
     * // Get first 10 UserTrips
     * const userTrips = await prisma.userTrip.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const userTripWithUserIdOnly = await prisma.userTrip.findMany({ select: { userId: true } })
     * 
    **/
    findMany<T extends UserTripFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserTripFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserTripPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a UserTrip.
     * @param {UserTripCreateArgs} args - Arguments to create a UserTrip.
     * @example
     * // Create one UserTrip
     * const UserTrip = await prisma.userTrip.create({
     *   data: {
     *     // ... data to create a UserTrip
     *   }
     * })
     * 
    **/
    create<T extends UserTripCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserTripCreateArgs<ExtArgs>>
    ): Prisma__UserTripClient<$Result.GetResult<Prisma.$UserTripPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many UserTrips.
     *     @param {UserTripCreateManyArgs} args - Arguments to create many UserTrips.
     *     @example
     *     // Create many UserTrips
     *     const userTrip = await prisma.userTrip.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserTripCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserTripCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserTrip.
     * @param {UserTripDeleteArgs} args - Arguments to delete one UserTrip.
     * @example
     * // Delete one UserTrip
     * const UserTrip = await prisma.userTrip.delete({
     *   where: {
     *     // ... filter to delete one UserTrip
     *   }
     * })
     * 
    **/
    delete<T extends UserTripDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserTripDeleteArgs<ExtArgs>>
    ): Prisma__UserTripClient<$Result.GetResult<Prisma.$UserTripPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one UserTrip.
     * @param {UserTripUpdateArgs} args - Arguments to update one UserTrip.
     * @example
     * // Update one UserTrip
     * const userTrip = await prisma.userTrip.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserTripUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserTripUpdateArgs<ExtArgs>>
    ): Prisma__UserTripClient<$Result.GetResult<Prisma.$UserTripPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more UserTrips.
     * @param {UserTripDeleteManyArgs} args - Arguments to filter UserTrips to delete.
     * @example
     * // Delete a few UserTrips
     * const { count } = await prisma.userTrip.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserTripDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserTripDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserTrips.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTripUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserTrips
     * const userTrip = await prisma.userTrip.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserTripUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserTripUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserTrip.
     * @param {UserTripUpsertArgs} args - Arguments to update or create a UserTrip.
     * @example
     * // Update or create a UserTrip
     * const userTrip = await prisma.userTrip.upsert({
     *   create: {
     *     // ... data to create a UserTrip
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserTrip we want to update
     *   }
     * })
    **/
    upsert<T extends UserTripUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserTripUpsertArgs<ExtArgs>>
    ): Prisma__UserTripClient<$Result.GetResult<Prisma.$UserTripPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of UserTrips.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTripCountArgs} args - Arguments to filter UserTrips to count.
     * @example
     * // Count the number of UserTrips
     * const count = await prisma.userTrip.count({
     *   where: {
     *     // ... the filter for the UserTrips we want to count
     *   }
     * })
    **/
    count<T extends UserTripCountArgs>(
      args?: Subset<T, UserTripCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserTripCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserTrip.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTripAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserTripAggregateArgs>(args: Subset<T, UserTripAggregateArgs>): Prisma.PrismaPromise<GetUserTripAggregateType<T>>

    /**
     * Group by UserTrip.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTripGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserTripGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserTripGroupByArgs['orderBy'] }
        : { orderBy?: UserTripGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserTripGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserTripGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserTrip model
   */
  readonly fields: UserTripFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserTrip.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserTripClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    trip<T extends TripDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TripDefaultArgs<ExtArgs>>): Prisma__TripClient<$Result.GetResult<Prisma.$TripPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the UserTrip model
   */ 
  interface UserTripFieldRefs {
    readonly userId: FieldRef<"UserTrip", 'Int'>
    readonly tripId: FieldRef<"UserTrip", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * UserTrip findUnique
   */
  export type UserTripFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTrip
     */
    select?: UserTripSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserTripInclude<ExtArgs> | null
    /**
     * Filter, which UserTrip to fetch.
     */
    where: UserTripWhereUniqueInput
  }


  /**
   * UserTrip findUniqueOrThrow
   */
  export type UserTripFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTrip
     */
    select?: UserTripSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserTripInclude<ExtArgs> | null
    /**
     * Filter, which UserTrip to fetch.
     */
    where: UserTripWhereUniqueInput
  }


  /**
   * UserTrip findFirst
   */
  export type UserTripFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTrip
     */
    select?: UserTripSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserTripInclude<ExtArgs> | null
    /**
     * Filter, which UserTrip to fetch.
     */
    where?: UserTripWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserTrips to fetch.
     */
    orderBy?: UserTripOrderByWithRelationInput | UserTripOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserTrips.
     */
    cursor?: UserTripWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserTrips from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserTrips.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserTrips.
     */
    distinct?: UserTripScalarFieldEnum | UserTripScalarFieldEnum[]
  }


  /**
   * UserTrip findFirstOrThrow
   */
  export type UserTripFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTrip
     */
    select?: UserTripSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserTripInclude<ExtArgs> | null
    /**
     * Filter, which UserTrip to fetch.
     */
    where?: UserTripWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserTrips to fetch.
     */
    orderBy?: UserTripOrderByWithRelationInput | UserTripOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserTrips.
     */
    cursor?: UserTripWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserTrips from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserTrips.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserTrips.
     */
    distinct?: UserTripScalarFieldEnum | UserTripScalarFieldEnum[]
  }


  /**
   * UserTrip findMany
   */
  export type UserTripFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTrip
     */
    select?: UserTripSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserTripInclude<ExtArgs> | null
    /**
     * Filter, which UserTrips to fetch.
     */
    where?: UserTripWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserTrips to fetch.
     */
    orderBy?: UserTripOrderByWithRelationInput | UserTripOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserTrips.
     */
    cursor?: UserTripWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserTrips from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserTrips.
     */
    skip?: number
    distinct?: UserTripScalarFieldEnum | UserTripScalarFieldEnum[]
  }


  /**
   * UserTrip create
   */
  export type UserTripCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTrip
     */
    select?: UserTripSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserTripInclude<ExtArgs> | null
    /**
     * The data needed to create a UserTrip.
     */
    data: XOR<UserTripCreateInput, UserTripUncheckedCreateInput>
  }


  /**
   * UserTrip createMany
   */
  export type UserTripCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserTrips.
     */
    data: UserTripCreateManyInput | UserTripCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * UserTrip update
   */
  export type UserTripUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTrip
     */
    select?: UserTripSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserTripInclude<ExtArgs> | null
    /**
     * The data needed to update a UserTrip.
     */
    data: XOR<UserTripUpdateInput, UserTripUncheckedUpdateInput>
    /**
     * Choose, which UserTrip to update.
     */
    where: UserTripWhereUniqueInput
  }


  /**
   * UserTrip updateMany
   */
  export type UserTripUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserTrips.
     */
    data: XOR<UserTripUpdateManyMutationInput, UserTripUncheckedUpdateManyInput>
    /**
     * Filter which UserTrips to update
     */
    where?: UserTripWhereInput
  }


  /**
   * UserTrip upsert
   */
  export type UserTripUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTrip
     */
    select?: UserTripSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserTripInclude<ExtArgs> | null
    /**
     * The filter to search for the UserTrip to update in case it exists.
     */
    where: UserTripWhereUniqueInput
    /**
     * In case the UserTrip found by the `where` argument doesn't exist, create a new UserTrip with this data.
     */
    create: XOR<UserTripCreateInput, UserTripUncheckedCreateInput>
    /**
     * In case the UserTrip was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserTripUpdateInput, UserTripUncheckedUpdateInput>
  }


  /**
   * UserTrip delete
   */
  export type UserTripDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTrip
     */
    select?: UserTripSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserTripInclude<ExtArgs> | null
    /**
     * Filter which UserTrip to delete.
     */
    where: UserTripWhereUniqueInput
  }


  /**
   * UserTrip deleteMany
   */
  export type UserTripDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserTrips to delete
     */
    where?: UserTripWhereInput
  }


  /**
   * UserTrip without action
   */
  export type UserTripDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTrip
     */
    select?: UserTripSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserTripInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    uuid: 'uuid',
    firstName: 'firstName',
    lastName: 'lastName',
    avatar: 'avatar',
    username: 'username',
    password: 'password',
    email: 'email',
    type: 'type'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const TripScalarFieldEnum: {
    uuid: 'uuid',
    description: 'description',
    name: 'name',
    startDate: 'startDate',
    endDate: 'endDate',
    rating: 'rating'
  };

  export type TripScalarFieldEnum = (typeof TripScalarFieldEnum)[keyof typeof TripScalarFieldEnum]


  export const LocationScalarFieldEnum: {
    uuid: 'uuid',
    name: 'name',
    description: 'description',
    type: 'type',
    rating: 'rating',
    latitude: 'latitude',
    longitude: 'longitude',
    tripUuid: 'tripUuid'
  };

  export type LocationScalarFieldEnum = (typeof LocationScalarFieldEnum)[keyof typeof LocationScalarFieldEnum]


  export const LocationTypeScalarFieldEnum: {
    uuid: 'uuid',
    name: 'name'
  };

  export type LocationTypeScalarFieldEnum = (typeof LocationTypeScalarFieldEnum)[keyof typeof LocationTypeScalarFieldEnum]


  export const PhotoScalarFieldEnum: {
    uuid: 'uuid',
    url: 'url',
    locationId: 'locationId'
  };

  export type PhotoScalarFieldEnum = (typeof PhotoScalarFieldEnum)[keyof typeof PhotoScalarFieldEnum]


  export const TripLocationScalarFieldEnum: {
    tripId: 'tripId',
    locationId: 'locationId'
  };

  export type TripLocationScalarFieldEnum = (typeof TripLocationScalarFieldEnum)[keyof typeof TripLocationScalarFieldEnum]


  export const UserTripScalarFieldEnum: {
    userId: 'userId',
    tripId: 'tripId'
  };

  export type UserTripScalarFieldEnum = (typeof UserTripScalarFieldEnum)[keyof typeof UserTripScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'UserType'
   */
  export type EnumUserTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserType'>
    


  /**
   * Reference to a field of type 'UserType[]'
   */
  export type ListEnumUserTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserType[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    uuid?: IntFilter<"User"> | number
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    avatar?: StringNullableFilter<"User"> | string | null
    username?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    type?: EnumUserTypeFilter<"User"> | $Enums.UserType
    trips?: UserTripListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    uuid?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    avatar?: SortOrderInput | SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
    type?: SortOrder
    trips?: UserTripOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    uuid?: number
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    avatar?: StringNullableFilter<"User"> | string | null
    username?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    type?: EnumUserTypeFilter<"User"> | $Enums.UserType
    trips?: UserTripListRelationFilter
  }, "uuid">

  export type UserOrderByWithAggregationInput = {
    uuid?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    avatar?: SortOrderInput | SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
    type?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    uuid?: IntWithAggregatesFilter<"User"> | number
    firstName?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringWithAggregatesFilter<"User"> | string
    avatar?: StringNullableWithAggregatesFilter<"User"> | string | null
    username?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    type?: EnumUserTypeWithAggregatesFilter<"User"> | $Enums.UserType
  }

  export type TripWhereInput = {
    AND?: TripWhereInput | TripWhereInput[]
    OR?: TripWhereInput[]
    NOT?: TripWhereInput | TripWhereInput[]
    uuid?: IntFilter<"Trip"> | number
    description?: StringFilter<"Trip"> | string
    name?: StringFilter<"Trip"> | string
    startDate?: DateTimeFilter<"Trip"> | Date | string
    endDate?: DateTimeFilter<"Trip"> | Date | string
    rating?: IntFilter<"Trip"> | number
    locations?: LocationListRelationFilter
    users?: UserTripListRelationFilter
    TripLocation?: TripLocationListRelationFilter
  }

  export type TripOrderByWithRelationInput = {
    uuid?: SortOrder
    description?: SortOrder
    name?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    rating?: SortOrder
    locations?: LocationOrderByRelationAggregateInput
    users?: UserTripOrderByRelationAggregateInput
    TripLocation?: TripLocationOrderByRelationAggregateInput
  }

  export type TripWhereUniqueInput = Prisma.AtLeast<{
    uuid?: number
    AND?: TripWhereInput | TripWhereInput[]
    OR?: TripWhereInput[]
    NOT?: TripWhereInput | TripWhereInput[]
    description?: StringFilter<"Trip"> | string
    name?: StringFilter<"Trip"> | string
    startDate?: DateTimeFilter<"Trip"> | Date | string
    endDate?: DateTimeFilter<"Trip"> | Date | string
    rating?: IntFilter<"Trip"> | number
    locations?: LocationListRelationFilter
    users?: UserTripListRelationFilter
    TripLocation?: TripLocationListRelationFilter
  }, "uuid">

  export type TripOrderByWithAggregationInput = {
    uuid?: SortOrder
    description?: SortOrder
    name?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    rating?: SortOrder
    _count?: TripCountOrderByAggregateInput
    _avg?: TripAvgOrderByAggregateInput
    _max?: TripMaxOrderByAggregateInput
    _min?: TripMinOrderByAggregateInput
    _sum?: TripSumOrderByAggregateInput
  }

  export type TripScalarWhereWithAggregatesInput = {
    AND?: TripScalarWhereWithAggregatesInput | TripScalarWhereWithAggregatesInput[]
    OR?: TripScalarWhereWithAggregatesInput[]
    NOT?: TripScalarWhereWithAggregatesInput | TripScalarWhereWithAggregatesInput[]
    uuid?: IntWithAggregatesFilter<"Trip"> | number
    description?: StringWithAggregatesFilter<"Trip"> | string
    name?: StringWithAggregatesFilter<"Trip"> | string
    startDate?: DateTimeWithAggregatesFilter<"Trip"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"Trip"> | Date | string
    rating?: IntWithAggregatesFilter<"Trip"> | number
  }

  export type LocationWhereInput = {
    AND?: LocationWhereInput | LocationWhereInput[]
    OR?: LocationWhereInput[]
    NOT?: LocationWhereInput | LocationWhereInput[]
    uuid?: IntFilter<"Location"> | number
    name?: StringFilter<"Location"> | string
    description?: StringFilter<"Location"> | string
    type?: IntFilter<"Location"> | number
    rating?: IntFilter<"Location"> | number
    latitude?: FloatFilter<"Location"> | number
    longitude?: FloatFilter<"Location"> | number
    tripUuid?: IntNullableFilter<"Location"> | number | null
    photos?: PhotoListRelationFilter
    trips?: TripLocationListRelationFilter
    Trip?: XOR<TripNullableRelationFilter, TripWhereInput> | null
  }

  export type LocationOrderByWithRelationInput = {
    uuid?: SortOrder
    name?: SortOrder
    description?: SortOrder
    type?: SortOrder
    rating?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    tripUuid?: SortOrderInput | SortOrder
    photos?: PhotoOrderByRelationAggregateInput
    trips?: TripLocationOrderByRelationAggregateInput
    Trip?: TripOrderByWithRelationInput
  }

  export type LocationWhereUniqueInput = Prisma.AtLeast<{
    uuid?: number
    AND?: LocationWhereInput | LocationWhereInput[]
    OR?: LocationWhereInput[]
    NOT?: LocationWhereInput | LocationWhereInput[]
    name?: StringFilter<"Location"> | string
    description?: StringFilter<"Location"> | string
    type?: IntFilter<"Location"> | number
    rating?: IntFilter<"Location"> | number
    latitude?: FloatFilter<"Location"> | number
    longitude?: FloatFilter<"Location"> | number
    tripUuid?: IntNullableFilter<"Location"> | number | null
    photos?: PhotoListRelationFilter
    trips?: TripLocationListRelationFilter
    Trip?: XOR<TripNullableRelationFilter, TripWhereInput> | null
  }, "uuid">

  export type LocationOrderByWithAggregationInput = {
    uuid?: SortOrder
    name?: SortOrder
    description?: SortOrder
    type?: SortOrder
    rating?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    tripUuid?: SortOrderInput | SortOrder
    _count?: LocationCountOrderByAggregateInput
    _avg?: LocationAvgOrderByAggregateInput
    _max?: LocationMaxOrderByAggregateInput
    _min?: LocationMinOrderByAggregateInput
    _sum?: LocationSumOrderByAggregateInput
  }

  export type LocationScalarWhereWithAggregatesInput = {
    AND?: LocationScalarWhereWithAggregatesInput | LocationScalarWhereWithAggregatesInput[]
    OR?: LocationScalarWhereWithAggregatesInput[]
    NOT?: LocationScalarWhereWithAggregatesInput | LocationScalarWhereWithAggregatesInput[]
    uuid?: IntWithAggregatesFilter<"Location"> | number
    name?: StringWithAggregatesFilter<"Location"> | string
    description?: StringWithAggregatesFilter<"Location"> | string
    type?: IntWithAggregatesFilter<"Location"> | number
    rating?: IntWithAggregatesFilter<"Location"> | number
    latitude?: FloatWithAggregatesFilter<"Location"> | number
    longitude?: FloatWithAggregatesFilter<"Location"> | number
    tripUuid?: IntNullableWithAggregatesFilter<"Location"> | number | null
  }

  export type LocationTypeWhereInput = {
    AND?: LocationTypeWhereInput | LocationTypeWhereInput[]
    OR?: LocationTypeWhereInput[]
    NOT?: LocationTypeWhereInput | LocationTypeWhereInput[]
    uuid?: IntFilter<"LocationType"> | number
    name?: StringFilter<"LocationType"> | string
  }

  export type LocationTypeOrderByWithRelationInput = {
    uuid?: SortOrder
    name?: SortOrder
  }

  export type LocationTypeWhereUniqueInput = Prisma.AtLeast<{
    uuid?: number
    name?: string
    AND?: LocationTypeWhereInput | LocationTypeWhereInput[]
    OR?: LocationTypeWhereInput[]
    NOT?: LocationTypeWhereInput | LocationTypeWhereInput[]
  }, "uuid" | "name">

  export type LocationTypeOrderByWithAggregationInput = {
    uuid?: SortOrder
    name?: SortOrder
    _count?: LocationTypeCountOrderByAggregateInput
    _avg?: LocationTypeAvgOrderByAggregateInput
    _max?: LocationTypeMaxOrderByAggregateInput
    _min?: LocationTypeMinOrderByAggregateInput
    _sum?: LocationTypeSumOrderByAggregateInput
  }

  export type LocationTypeScalarWhereWithAggregatesInput = {
    AND?: LocationTypeScalarWhereWithAggregatesInput | LocationTypeScalarWhereWithAggregatesInput[]
    OR?: LocationTypeScalarWhereWithAggregatesInput[]
    NOT?: LocationTypeScalarWhereWithAggregatesInput | LocationTypeScalarWhereWithAggregatesInput[]
    uuid?: IntWithAggregatesFilter<"LocationType"> | number
    name?: StringWithAggregatesFilter<"LocationType"> | string
  }

  export type PhotoWhereInput = {
    AND?: PhotoWhereInput | PhotoWhereInput[]
    OR?: PhotoWhereInput[]
    NOT?: PhotoWhereInput | PhotoWhereInput[]
    uuid?: IntFilter<"Photo"> | number
    url?: StringFilter<"Photo"> | string
    locationId?: IntFilter<"Photo"> | number
    location?: XOR<LocationRelationFilter, LocationWhereInput>
  }

  export type PhotoOrderByWithRelationInput = {
    uuid?: SortOrder
    url?: SortOrder
    locationId?: SortOrder
    location?: LocationOrderByWithRelationInput
  }

  export type PhotoWhereUniqueInput = Prisma.AtLeast<{
    uuid?: number
    AND?: PhotoWhereInput | PhotoWhereInput[]
    OR?: PhotoWhereInput[]
    NOT?: PhotoWhereInput | PhotoWhereInput[]
    url?: StringFilter<"Photo"> | string
    locationId?: IntFilter<"Photo"> | number
    location?: XOR<LocationRelationFilter, LocationWhereInput>
  }, "uuid">

  export type PhotoOrderByWithAggregationInput = {
    uuid?: SortOrder
    url?: SortOrder
    locationId?: SortOrder
    _count?: PhotoCountOrderByAggregateInput
    _avg?: PhotoAvgOrderByAggregateInput
    _max?: PhotoMaxOrderByAggregateInput
    _min?: PhotoMinOrderByAggregateInput
    _sum?: PhotoSumOrderByAggregateInput
  }

  export type PhotoScalarWhereWithAggregatesInput = {
    AND?: PhotoScalarWhereWithAggregatesInput | PhotoScalarWhereWithAggregatesInput[]
    OR?: PhotoScalarWhereWithAggregatesInput[]
    NOT?: PhotoScalarWhereWithAggregatesInput | PhotoScalarWhereWithAggregatesInput[]
    uuid?: IntWithAggregatesFilter<"Photo"> | number
    url?: StringWithAggregatesFilter<"Photo"> | string
    locationId?: IntWithAggregatesFilter<"Photo"> | number
  }

  export type TripLocationWhereInput = {
    AND?: TripLocationWhereInput | TripLocationWhereInput[]
    OR?: TripLocationWhereInput[]
    NOT?: TripLocationWhereInput | TripLocationWhereInput[]
    tripId?: IntFilter<"TripLocation"> | number
    locationId?: IntFilter<"TripLocation"> | number
    trip?: XOR<TripRelationFilter, TripWhereInput>
    location?: XOR<LocationRelationFilter, LocationWhereInput>
  }

  export type TripLocationOrderByWithRelationInput = {
    tripId?: SortOrder
    locationId?: SortOrder
    trip?: TripOrderByWithRelationInput
    location?: LocationOrderByWithRelationInput
  }

  export type TripLocationWhereUniqueInput = Prisma.AtLeast<{
    tripId_locationId?: TripLocationTripIdLocationIdCompoundUniqueInput
    AND?: TripLocationWhereInput | TripLocationWhereInput[]
    OR?: TripLocationWhereInput[]
    NOT?: TripLocationWhereInput | TripLocationWhereInput[]
    tripId?: IntFilter<"TripLocation"> | number
    locationId?: IntFilter<"TripLocation"> | number
    trip?: XOR<TripRelationFilter, TripWhereInput>
    location?: XOR<LocationRelationFilter, LocationWhereInput>
  }, "tripId_locationId">

  export type TripLocationOrderByWithAggregationInput = {
    tripId?: SortOrder
    locationId?: SortOrder
    _count?: TripLocationCountOrderByAggregateInput
    _avg?: TripLocationAvgOrderByAggregateInput
    _max?: TripLocationMaxOrderByAggregateInput
    _min?: TripLocationMinOrderByAggregateInput
    _sum?: TripLocationSumOrderByAggregateInput
  }

  export type TripLocationScalarWhereWithAggregatesInput = {
    AND?: TripLocationScalarWhereWithAggregatesInput | TripLocationScalarWhereWithAggregatesInput[]
    OR?: TripLocationScalarWhereWithAggregatesInput[]
    NOT?: TripLocationScalarWhereWithAggregatesInput | TripLocationScalarWhereWithAggregatesInput[]
    tripId?: IntWithAggregatesFilter<"TripLocation"> | number
    locationId?: IntWithAggregatesFilter<"TripLocation"> | number
  }

  export type UserTripWhereInput = {
    AND?: UserTripWhereInput | UserTripWhereInput[]
    OR?: UserTripWhereInput[]
    NOT?: UserTripWhereInput | UserTripWhereInput[]
    userId?: IntFilter<"UserTrip"> | number
    tripId?: IntFilter<"UserTrip"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    trip?: XOR<TripRelationFilter, TripWhereInput>
  }

  export type UserTripOrderByWithRelationInput = {
    userId?: SortOrder
    tripId?: SortOrder
    user?: UserOrderByWithRelationInput
    trip?: TripOrderByWithRelationInput
  }

  export type UserTripWhereUniqueInput = Prisma.AtLeast<{
    userId_tripId?: UserTripUserIdTripIdCompoundUniqueInput
    AND?: UserTripWhereInput | UserTripWhereInput[]
    OR?: UserTripWhereInput[]
    NOT?: UserTripWhereInput | UserTripWhereInput[]
    userId?: IntFilter<"UserTrip"> | number
    tripId?: IntFilter<"UserTrip"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    trip?: XOR<TripRelationFilter, TripWhereInput>
  }, "userId_tripId">

  export type UserTripOrderByWithAggregationInput = {
    userId?: SortOrder
    tripId?: SortOrder
    _count?: UserTripCountOrderByAggregateInput
    _avg?: UserTripAvgOrderByAggregateInput
    _max?: UserTripMaxOrderByAggregateInput
    _min?: UserTripMinOrderByAggregateInput
    _sum?: UserTripSumOrderByAggregateInput
  }

  export type UserTripScalarWhereWithAggregatesInput = {
    AND?: UserTripScalarWhereWithAggregatesInput | UserTripScalarWhereWithAggregatesInput[]
    OR?: UserTripScalarWhereWithAggregatesInput[]
    NOT?: UserTripScalarWhereWithAggregatesInput | UserTripScalarWhereWithAggregatesInput[]
    userId?: IntWithAggregatesFilter<"UserTrip"> | number
    tripId?: IntWithAggregatesFilter<"UserTrip"> | number
  }

  export type UserCreateInput = {
    firstName: string
    lastName: string
    avatar?: string | null
    username: string
    password: string
    email: string
    type: $Enums.UserType
    trips?: UserTripCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    uuid?: number
    firstName: string
    lastName: string
    avatar?: string | null
    username: string
    password: string
    email: string
    type: $Enums.UserType
    trips?: UserTripUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    trips?: UserTripUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    uuid?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    trips?: UserTripUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    uuid?: number
    firstName: string
    lastName: string
    avatar?: string | null
    username: string
    password: string
    email: string
    type: $Enums.UserType
  }

  export type UserUpdateManyMutationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
  }

  export type UserUncheckedUpdateManyInput = {
    uuid?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
  }

  export type TripCreateInput = {
    description: string
    name: string
    startDate: Date | string
    endDate: Date | string
    rating: number
    locations?: LocationCreateNestedManyWithoutTripInput
    users?: UserTripCreateNestedManyWithoutTripInput
    TripLocation?: TripLocationCreateNestedManyWithoutTripInput
  }

  export type TripUncheckedCreateInput = {
    uuid?: number
    description: string
    name: string
    startDate: Date | string
    endDate: Date | string
    rating: number
    locations?: LocationUncheckedCreateNestedManyWithoutTripInput
    users?: UserTripUncheckedCreateNestedManyWithoutTripInput
    TripLocation?: TripLocationUncheckedCreateNestedManyWithoutTripInput
  }

  export type TripUpdateInput = {
    description?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: IntFieldUpdateOperationsInput | number
    locations?: LocationUpdateManyWithoutTripNestedInput
    users?: UserTripUpdateManyWithoutTripNestedInput
    TripLocation?: TripLocationUpdateManyWithoutTripNestedInput
  }

  export type TripUncheckedUpdateInput = {
    uuid?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: IntFieldUpdateOperationsInput | number
    locations?: LocationUncheckedUpdateManyWithoutTripNestedInput
    users?: UserTripUncheckedUpdateManyWithoutTripNestedInput
    TripLocation?: TripLocationUncheckedUpdateManyWithoutTripNestedInput
  }

  export type TripCreateManyInput = {
    uuid?: number
    description: string
    name: string
    startDate: Date | string
    endDate: Date | string
    rating: number
  }

  export type TripUpdateManyMutationInput = {
    description?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: IntFieldUpdateOperationsInput | number
  }

  export type TripUncheckedUpdateManyInput = {
    uuid?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: IntFieldUpdateOperationsInput | number
  }

  export type LocationCreateInput = {
    name: string
    description: string
    type: number
    rating: number
    latitude: number
    longitude: number
    photos?: PhotoCreateNestedManyWithoutLocationInput
    trips?: TripLocationCreateNestedManyWithoutLocationInput
    Trip?: TripCreateNestedOneWithoutLocationsInput
  }

  export type LocationUncheckedCreateInput = {
    uuid?: number
    name: string
    description: string
    type: number
    rating: number
    latitude: number
    longitude: number
    tripUuid?: number | null
    photos?: PhotoUncheckedCreateNestedManyWithoutLocationInput
    trips?: TripLocationUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    photos?: PhotoUpdateManyWithoutLocationNestedInput
    trips?: TripLocationUpdateManyWithoutLocationNestedInput
    Trip?: TripUpdateOneWithoutLocationsNestedInput
  }

  export type LocationUncheckedUpdateInput = {
    uuid?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    tripUuid?: NullableIntFieldUpdateOperationsInput | number | null
    photos?: PhotoUncheckedUpdateManyWithoutLocationNestedInput
    trips?: TripLocationUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type LocationCreateManyInput = {
    uuid?: number
    name: string
    description: string
    type: number
    rating: number
    latitude: number
    longitude: number
    tripUuid?: number | null
  }

  export type LocationUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
  }

  export type LocationUncheckedUpdateManyInput = {
    uuid?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    tripUuid?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type LocationTypeCreateInput = {
    name: string
  }

  export type LocationTypeUncheckedCreateInput = {
    uuid?: number
    name: string
  }

  export type LocationTypeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type LocationTypeUncheckedUpdateInput = {
    uuid?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type LocationTypeCreateManyInput = {
    uuid?: number
    name: string
  }

  export type LocationTypeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type LocationTypeUncheckedUpdateManyInput = {
    uuid?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type PhotoCreateInput = {
    url: string
    location: LocationCreateNestedOneWithoutPhotosInput
  }

  export type PhotoUncheckedCreateInput = {
    uuid?: number
    url: string
    locationId: number
  }

  export type PhotoUpdateInput = {
    url?: StringFieldUpdateOperationsInput | string
    location?: LocationUpdateOneRequiredWithoutPhotosNestedInput
  }

  export type PhotoUncheckedUpdateInput = {
    uuid?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    locationId?: IntFieldUpdateOperationsInput | number
  }

  export type PhotoCreateManyInput = {
    uuid?: number
    url: string
    locationId: number
  }

  export type PhotoUpdateManyMutationInput = {
    url?: StringFieldUpdateOperationsInput | string
  }

  export type PhotoUncheckedUpdateManyInput = {
    uuid?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    locationId?: IntFieldUpdateOperationsInput | number
  }

  export type TripLocationCreateInput = {
    trip: TripCreateNestedOneWithoutTripLocationInput
    location: LocationCreateNestedOneWithoutTripsInput
  }

  export type TripLocationUncheckedCreateInput = {
    tripId: number
    locationId: number
  }

  export type TripLocationUpdateInput = {
    trip?: TripUpdateOneRequiredWithoutTripLocationNestedInput
    location?: LocationUpdateOneRequiredWithoutTripsNestedInput
  }

  export type TripLocationUncheckedUpdateInput = {
    tripId?: IntFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
  }

  export type TripLocationCreateManyInput = {
    tripId: number
    locationId: number
  }

  export type TripLocationUpdateManyMutationInput = {

  }

  export type TripLocationUncheckedUpdateManyInput = {
    tripId?: IntFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
  }

  export type UserTripCreateInput = {
    user: UserCreateNestedOneWithoutTripsInput
    trip: TripCreateNestedOneWithoutUsersInput
  }

  export type UserTripUncheckedCreateInput = {
    userId: number
    tripId: number
  }

  export type UserTripUpdateInput = {
    user?: UserUpdateOneRequiredWithoutTripsNestedInput
    trip?: TripUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserTripUncheckedUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    tripId?: IntFieldUpdateOperationsInput | number
  }

  export type UserTripCreateManyInput = {
    userId: number
    tripId: number
  }

  export type UserTripUpdateManyMutationInput = {

  }

  export type UserTripUncheckedUpdateManyInput = {
    userId?: IntFieldUpdateOperationsInput | number
    tripId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumUserTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.UserType | EnumUserTypeFieldRefInput<$PrismaModel>
    in?: $Enums.UserType[] | ListEnumUserTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserType[] | ListEnumUserTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumUserTypeFilter<$PrismaModel> | $Enums.UserType
  }

  export type UserTripListRelationFilter = {
    every?: UserTripWhereInput
    some?: UserTripWhereInput
    none?: UserTripWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserTripOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    uuid?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    avatar?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
    type?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    uuid?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    uuid?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    avatar?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
    type?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    uuid?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    avatar?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
    type?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    uuid?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumUserTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserType | EnumUserTypeFieldRefInput<$PrismaModel>
    in?: $Enums.UserType[] | ListEnumUserTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserType[] | ListEnumUserTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumUserTypeWithAggregatesFilter<$PrismaModel> | $Enums.UserType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserTypeFilter<$PrismaModel>
    _max?: NestedEnumUserTypeFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type LocationListRelationFilter = {
    every?: LocationWhereInput
    some?: LocationWhereInput
    none?: LocationWhereInput
  }

  export type TripLocationListRelationFilter = {
    every?: TripLocationWhereInput
    some?: TripLocationWhereInput
    none?: TripLocationWhereInput
  }

  export type LocationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TripLocationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TripCountOrderByAggregateInput = {
    uuid?: SortOrder
    description?: SortOrder
    name?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    rating?: SortOrder
  }

  export type TripAvgOrderByAggregateInput = {
    uuid?: SortOrder
    rating?: SortOrder
  }

  export type TripMaxOrderByAggregateInput = {
    uuid?: SortOrder
    description?: SortOrder
    name?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    rating?: SortOrder
  }

  export type TripMinOrderByAggregateInput = {
    uuid?: SortOrder
    description?: SortOrder
    name?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    rating?: SortOrder
  }

  export type TripSumOrderByAggregateInput = {
    uuid?: SortOrder
    rating?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type PhotoListRelationFilter = {
    every?: PhotoWhereInput
    some?: PhotoWhereInput
    none?: PhotoWhereInput
  }

  export type TripNullableRelationFilter = {
    is?: TripWhereInput | null
    isNot?: TripWhereInput | null
  }

  export type PhotoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LocationCountOrderByAggregateInput = {
    uuid?: SortOrder
    name?: SortOrder
    description?: SortOrder
    type?: SortOrder
    rating?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    tripUuid?: SortOrder
  }

  export type LocationAvgOrderByAggregateInput = {
    uuid?: SortOrder
    type?: SortOrder
    rating?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    tripUuid?: SortOrder
  }

  export type LocationMaxOrderByAggregateInput = {
    uuid?: SortOrder
    name?: SortOrder
    description?: SortOrder
    type?: SortOrder
    rating?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    tripUuid?: SortOrder
  }

  export type LocationMinOrderByAggregateInput = {
    uuid?: SortOrder
    name?: SortOrder
    description?: SortOrder
    type?: SortOrder
    rating?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    tripUuid?: SortOrder
  }

  export type LocationSumOrderByAggregateInput = {
    uuid?: SortOrder
    type?: SortOrder
    rating?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    tripUuid?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type LocationTypeCountOrderByAggregateInput = {
    uuid?: SortOrder
    name?: SortOrder
  }

  export type LocationTypeAvgOrderByAggregateInput = {
    uuid?: SortOrder
  }

  export type LocationTypeMaxOrderByAggregateInput = {
    uuid?: SortOrder
    name?: SortOrder
  }

  export type LocationTypeMinOrderByAggregateInput = {
    uuid?: SortOrder
    name?: SortOrder
  }

  export type LocationTypeSumOrderByAggregateInput = {
    uuid?: SortOrder
  }

  export type LocationRelationFilter = {
    is?: LocationWhereInput
    isNot?: LocationWhereInput
  }

  export type PhotoCountOrderByAggregateInput = {
    uuid?: SortOrder
    url?: SortOrder
    locationId?: SortOrder
  }

  export type PhotoAvgOrderByAggregateInput = {
    uuid?: SortOrder
    locationId?: SortOrder
  }

  export type PhotoMaxOrderByAggregateInput = {
    uuid?: SortOrder
    url?: SortOrder
    locationId?: SortOrder
  }

  export type PhotoMinOrderByAggregateInput = {
    uuid?: SortOrder
    url?: SortOrder
    locationId?: SortOrder
  }

  export type PhotoSumOrderByAggregateInput = {
    uuid?: SortOrder
    locationId?: SortOrder
  }

  export type TripRelationFilter = {
    is?: TripWhereInput
    isNot?: TripWhereInput
  }

  export type TripLocationTripIdLocationIdCompoundUniqueInput = {
    tripId: number
    locationId: number
  }

  export type TripLocationCountOrderByAggregateInput = {
    tripId?: SortOrder
    locationId?: SortOrder
  }

  export type TripLocationAvgOrderByAggregateInput = {
    tripId?: SortOrder
    locationId?: SortOrder
  }

  export type TripLocationMaxOrderByAggregateInput = {
    tripId?: SortOrder
    locationId?: SortOrder
  }

  export type TripLocationMinOrderByAggregateInput = {
    tripId?: SortOrder
    locationId?: SortOrder
  }

  export type TripLocationSumOrderByAggregateInput = {
    tripId?: SortOrder
    locationId?: SortOrder
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type UserTripUserIdTripIdCompoundUniqueInput = {
    userId: number
    tripId: number
  }

  export type UserTripCountOrderByAggregateInput = {
    userId?: SortOrder
    tripId?: SortOrder
  }

  export type UserTripAvgOrderByAggregateInput = {
    userId?: SortOrder
    tripId?: SortOrder
  }

  export type UserTripMaxOrderByAggregateInput = {
    userId?: SortOrder
    tripId?: SortOrder
  }

  export type UserTripMinOrderByAggregateInput = {
    userId?: SortOrder
    tripId?: SortOrder
  }

  export type UserTripSumOrderByAggregateInput = {
    userId?: SortOrder
    tripId?: SortOrder
  }

  export type UserTripCreateNestedManyWithoutUserInput = {
    create?: XOR<UserTripCreateWithoutUserInput, UserTripUncheckedCreateWithoutUserInput> | UserTripCreateWithoutUserInput[] | UserTripUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserTripCreateOrConnectWithoutUserInput | UserTripCreateOrConnectWithoutUserInput[]
    createMany?: UserTripCreateManyUserInputEnvelope
    connect?: UserTripWhereUniqueInput | UserTripWhereUniqueInput[]
  }

  export type UserTripUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserTripCreateWithoutUserInput, UserTripUncheckedCreateWithoutUserInput> | UserTripCreateWithoutUserInput[] | UserTripUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserTripCreateOrConnectWithoutUserInput | UserTripCreateOrConnectWithoutUserInput[]
    createMany?: UserTripCreateManyUserInputEnvelope
    connect?: UserTripWhereUniqueInput | UserTripWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumUserTypeFieldUpdateOperationsInput = {
    set?: $Enums.UserType
  }

  export type UserTripUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserTripCreateWithoutUserInput, UserTripUncheckedCreateWithoutUserInput> | UserTripCreateWithoutUserInput[] | UserTripUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserTripCreateOrConnectWithoutUserInput | UserTripCreateOrConnectWithoutUserInput[]
    upsert?: UserTripUpsertWithWhereUniqueWithoutUserInput | UserTripUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserTripCreateManyUserInputEnvelope
    set?: UserTripWhereUniqueInput | UserTripWhereUniqueInput[]
    disconnect?: UserTripWhereUniqueInput | UserTripWhereUniqueInput[]
    delete?: UserTripWhereUniqueInput | UserTripWhereUniqueInput[]
    connect?: UserTripWhereUniqueInput | UserTripWhereUniqueInput[]
    update?: UserTripUpdateWithWhereUniqueWithoutUserInput | UserTripUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserTripUpdateManyWithWhereWithoutUserInput | UserTripUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserTripScalarWhereInput | UserTripScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserTripUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserTripCreateWithoutUserInput, UserTripUncheckedCreateWithoutUserInput> | UserTripCreateWithoutUserInput[] | UserTripUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserTripCreateOrConnectWithoutUserInput | UserTripCreateOrConnectWithoutUserInput[]
    upsert?: UserTripUpsertWithWhereUniqueWithoutUserInput | UserTripUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserTripCreateManyUserInputEnvelope
    set?: UserTripWhereUniqueInput | UserTripWhereUniqueInput[]
    disconnect?: UserTripWhereUniqueInput | UserTripWhereUniqueInput[]
    delete?: UserTripWhereUniqueInput | UserTripWhereUniqueInput[]
    connect?: UserTripWhereUniqueInput | UserTripWhereUniqueInput[]
    update?: UserTripUpdateWithWhereUniqueWithoutUserInput | UserTripUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserTripUpdateManyWithWhereWithoutUserInput | UserTripUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserTripScalarWhereInput | UserTripScalarWhereInput[]
  }

  export type LocationCreateNestedManyWithoutTripInput = {
    create?: XOR<LocationCreateWithoutTripInput, LocationUncheckedCreateWithoutTripInput> | LocationCreateWithoutTripInput[] | LocationUncheckedCreateWithoutTripInput[]
    connectOrCreate?: LocationCreateOrConnectWithoutTripInput | LocationCreateOrConnectWithoutTripInput[]
    createMany?: LocationCreateManyTripInputEnvelope
    connect?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
  }

  export type UserTripCreateNestedManyWithoutTripInput = {
    create?: XOR<UserTripCreateWithoutTripInput, UserTripUncheckedCreateWithoutTripInput> | UserTripCreateWithoutTripInput[] | UserTripUncheckedCreateWithoutTripInput[]
    connectOrCreate?: UserTripCreateOrConnectWithoutTripInput | UserTripCreateOrConnectWithoutTripInput[]
    createMany?: UserTripCreateManyTripInputEnvelope
    connect?: UserTripWhereUniqueInput | UserTripWhereUniqueInput[]
  }

  export type TripLocationCreateNestedManyWithoutTripInput = {
    create?: XOR<TripLocationCreateWithoutTripInput, TripLocationUncheckedCreateWithoutTripInput> | TripLocationCreateWithoutTripInput[] | TripLocationUncheckedCreateWithoutTripInput[]
    connectOrCreate?: TripLocationCreateOrConnectWithoutTripInput | TripLocationCreateOrConnectWithoutTripInput[]
    createMany?: TripLocationCreateManyTripInputEnvelope
    connect?: TripLocationWhereUniqueInput | TripLocationWhereUniqueInput[]
  }

  export type LocationUncheckedCreateNestedManyWithoutTripInput = {
    create?: XOR<LocationCreateWithoutTripInput, LocationUncheckedCreateWithoutTripInput> | LocationCreateWithoutTripInput[] | LocationUncheckedCreateWithoutTripInput[]
    connectOrCreate?: LocationCreateOrConnectWithoutTripInput | LocationCreateOrConnectWithoutTripInput[]
    createMany?: LocationCreateManyTripInputEnvelope
    connect?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
  }

  export type UserTripUncheckedCreateNestedManyWithoutTripInput = {
    create?: XOR<UserTripCreateWithoutTripInput, UserTripUncheckedCreateWithoutTripInput> | UserTripCreateWithoutTripInput[] | UserTripUncheckedCreateWithoutTripInput[]
    connectOrCreate?: UserTripCreateOrConnectWithoutTripInput | UserTripCreateOrConnectWithoutTripInput[]
    createMany?: UserTripCreateManyTripInputEnvelope
    connect?: UserTripWhereUniqueInput | UserTripWhereUniqueInput[]
  }

  export type TripLocationUncheckedCreateNestedManyWithoutTripInput = {
    create?: XOR<TripLocationCreateWithoutTripInput, TripLocationUncheckedCreateWithoutTripInput> | TripLocationCreateWithoutTripInput[] | TripLocationUncheckedCreateWithoutTripInput[]
    connectOrCreate?: TripLocationCreateOrConnectWithoutTripInput | TripLocationCreateOrConnectWithoutTripInput[]
    createMany?: TripLocationCreateManyTripInputEnvelope
    connect?: TripLocationWhereUniqueInput | TripLocationWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type LocationUpdateManyWithoutTripNestedInput = {
    create?: XOR<LocationCreateWithoutTripInput, LocationUncheckedCreateWithoutTripInput> | LocationCreateWithoutTripInput[] | LocationUncheckedCreateWithoutTripInput[]
    connectOrCreate?: LocationCreateOrConnectWithoutTripInput | LocationCreateOrConnectWithoutTripInput[]
    upsert?: LocationUpsertWithWhereUniqueWithoutTripInput | LocationUpsertWithWhereUniqueWithoutTripInput[]
    createMany?: LocationCreateManyTripInputEnvelope
    set?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    disconnect?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    delete?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    connect?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    update?: LocationUpdateWithWhereUniqueWithoutTripInput | LocationUpdateWithWhereUniqueWithoutTripInput[]
    updateMany?: LocationUpdateManyWithWhereWithoutTripInput | LocationUpdateManyWithWhereWithoutTripInput[]
    deleteMany?: LocationScalarWhereInput | LocationScalarWhereInput[]
  }

  export type UserTripUpdateManyWithoutTripNestedInput = {
    create?: XOR<UserTripCreateWithoutTripInput, UserTripUncheckedCreateWithoutTripInput> | UserTripCreateWithoutTripInput[] | UserTripUncheckedCreateWithoutTripInput[]
    connectOrCreate?: UserTripCreateOrConnectWithoutTripInput | UserTripCreateOrConnectWithoutTripInput[]
    upsert?: UserTripUpsertWithWhereUniqueWithoutTripInput | UserTripUpsertWithWhereUniqueWithoutTripInput[]
    createMany?: UserTripCreateManyTripInputEnvelope
    set?: UserTripWhereUniqueInput | UserTripWhereUniqueInput[]
    disconnect?: UserTripWhereUniqueInput | UserTripWhereUniqueInput[]
    delete?: UserTripWhereUniqueInput | UserTripWhereUniqueInput[]
    connect?: UserTripWhereUniqueInput | UserTripWhereUniqueInput[]
    update?: UserTripUpdateWithWhereUniqueWithoutTripInput | UserTripUpdateWithWhereUniqueWithoutTripInput[]
    updateMany?: UserTripUpdateManyWithWhereWithoutTripInput | UserTripUpdateManyWithWhereWithoutTripInput[]
    deleteMany?: UserTripScalarWhereInput | UserTripScalarWhereInput[]
  }

  export type TripLocationUpdateManyWithoutTripNestedInput = {
    create?: XOR<TripLocationCreateWithoutTripInput, TripLocationUncheckedCreateWithoutTripInput> | TripLocationCreateWithoutTripInput[] | TripLocationUncheckedCreateWithoutTripInput[]
    connectOrCreate?: TripLocationCreateOrConnectWithoutTripInput | TripLocationCreateOrConnectWithoutTripInput[]
    upsert?: TripLocationUpsertWithWhereUniqueWithoutTripInput | TripLocationUpsertWithWhereUniqueWithoutTripInput[]
    createMany?: TripLocationCreateManyTripInputEnvelope
    set?: TripLocationWhereUniqueInput | TripLocationWhereUniqueInput[]
    disconnect?: TripLocationWhereUniqueInput | TripLocationWhereUniqueInput[]
    delete?: TripLocationWhereUniqueInput | TripLocationWhereUniqueInput[]
    connect?: TripLocationWhereUniqueInput | TripLocationWhereUniqueInput[]
    update?: TripLocationUpdateWithWhereUniqueWithoutTripInput | TripLocationUpdateWithWhereUniqueWithoutTripInput[]
    updateMany?: TripLocationUpdateManyWithWhereWithoutTripInput | TripLocationUpdateManyWithWhereWithoutTripInput[]
    deleteMany?: TripLocationScalarWhereInput | TripLocationScalarWhereInput[]
  }

  export type LocationUncheckedUpdateManyWithoutTripNestedInput = {
    create?: XOR<LocationCreateWithoutTripInput, LocationUncheckedCreateWithoutTripInput> | LocationCreateWithoutTripInput[] | LocationUncheckedCreateWithoutTripInput[]
    connectOrCreate?: LocationCreateOrConnectWithoutTripInput | LocationCreateOrConnectWithoutTripInput[]
    upsert?: LocationUpsertWithWhereUniqueWithoutTripInput | LocationUpsertWithWhereUniqueWithoutTripInput[]
    createMany?: LocationCreateManyTripInputEnvelope
    set?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    disconnect?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    delete?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    connect?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    update?: LocationUpdateWithWhereUniqueWithoutTripInput | LocationUpdateWithWhereUniqueWithoutTripInput[]
    updateMany?: LocationUpdateManyWithWhereWithoutTripInput | LocationUpdateManyWithWhereWithoutTripInput[]
    deleteMany?: LocationScalarWhereInput | LocationScalarWhereInput[]
  }

  export type UserTripUncheckedUpdateManyWithoutTripNestedInput = {
    create?: XOR<UserTripCreateWithoutTripInput, UserTripUncheckedCreateWithoutTripInput> | UserTripCreateWithoutTripInput[] | UserTripUncheckedCreateWithoutTripInput[]
    connectOrCreate?: UserTripCreateOrConnectWithoutTripInput | UserTripCreateOrConnectWithoutTripInput[]
    upsert?: UserTripUpsertWithWhereUniqueWithoutTripInput | UserTripUpsertWithWhereUniqueWithoutTripInput[]
    createMany?: UserTripCreateManyTripInputEnvelope
    set?: UserTripWhereUniqueInput | UserTripWhereUniqueInput[]
    disconnect?: UserTripWhereUniqueInput | UserTripWhereUniqueInput[]
    delete?: UserTripWhereUniqueInput | UserTripWhereUniqueInput[]
    connect?: UserTripWhereUniqueInput | UserTripWhereUniqueInput[]
    update?: UserTripUpdateWithWhereUniqueWithoutTripInput | UserTripUpdateWithWhereUniqueWithoutTripInput[]
    updateMany?: UserTripUpdateManyWithWhereWithoutTripInput | UserTripUpdateManyWithWhereWithoutTripInput[]
    deleteMany?: UserTripScalarWhereInput | UserTripScalarWhereInput[]
  }

  export type TripLocationUncheckedUpdateManyWithoutTripNestedInput = {
    create?: XOR<TripLocationCreateWithoutTripInput, TripLocationUncheckedCreateWithoutTripInput> | TripLocationCreateWithoutTripInput[] | TripLocationUncheckedCreateWithoutTripInput[]
    connectOrCreate?: TripLocationCreateOrConnectWithoutTripInput | TripLocationCreateOrConnectWithoutTripInput[]
    upsert?: TripLocationUpsertWithWhereUniqueWithoutTripInput | TripLocationUpsertWithWhereUniqueWithoutTripInput[]
    createMany?: TripLocationCreateManyTripInputEnvelope
    set?: TripLocationWhereUniqueInput | TripLocationWhereUniqueInput[]
    disconnect?: TripLocationWhereUniqueInput | TripLocationWhereUniqueInput[]
    delete?: TripLocationWhereUniqueInput | TripLocationWhereUniqueInput[]
    connect?: TripLocationWhereUniqueInput | TripLocationWhereUniqueInput[]
    update?: TripLocationUpdateWithWhereUniqueWithoutTripInput | TripLocationUpdateWithWhereUniqueWithoutTripInput[]
    updateMany?: TripLocationUpdateManyWithWhereWithoutTripInput | TripLocationUpdateManyWithWhereWithoutTripInput[]
    deleteMany?: TripLocationScalarWhereInput | TripLocationScalarWhereInput[]
  }

  export type PhotoCreateNestedManyWithoutLocationInput = {
    create?: XOR<PhotoCreateWithoutLocationInput, PhotoUncheckedCreateWithoutLocationInput> | PhotoCreateWithoutLocationInput[] | PhotoUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: PhotoCreateOrConnectWithoutLocationInput | PhotoCreateOrConnectWithoutLocationInput[]
    createMany?: PhotoCreateManyLocationInputEnvelope
    connect?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
  }

  export type TripLocationCreateNestedManyWithoutLocationInput = {
    create?: XOR<TripLocationCreateWithoutLocationInput, TripLocationUncheckedCreateWithoutLocationInput> | TripLocationCreateWithoutLocationInput[] | TripLocationUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: TripLocationCreateOrConnectWithoutLocationInput | TripLocationCreateOrConnectWithoutLocationInput[]
    createMany?: TripLocationCreateManyLocationInputEnvelope
    connect?: TripLocationWhereUniqueInput | TripLocationWhereUniqueInput[]
  }

  export type TripCreateNestedOneWithoutLocationsInput = {
    create?: XOR<TripCreateWithoutLocationsInput, TripUncheckedCreateWithoutLocationsInput>
    connectOrCreate?: TripCreateOrConnectWithoutLocationsInput
    connect?: TripWhereUniqueInput
  }

  export type PhotoUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<PhotoCreateWithoutLocationInput, PhotoUncheckedCreateWithoutLocationInput> | PhotoCreateWithoutLocationInput[] | PhotoUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: PhotoCreateOrConnectWithoutLocationInput | PhotoCreateOrConnectWithoutLocationInput[]
    createMany?: PhotoCreateManyLocationInputEnvelope
    connect?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
  }

  export type TripLocationUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<TripLocationCreateWithoutLocationInput, TripLocationUncheckedCreateWithoutLocationInput> | TripLocationCreateWithoutLocationInput[] | TripLocationUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: TripLocationCreateOrConnectWithoutLocationInput | TripLocationCreateOrConnectWithoutLocationInput[]
    createMany?: TripLocationCreateManyLocationInputEnvelope
    connect?: TripLocationWhereUniqueInput | TripLocationWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PhotoUpdateManyWithoutLocationNestedInput = {
    create?: XOR<PhotoCreateWithoutLocationInput, PhotoUncheckedCreateWithoutLocationInput> | PhotoCreateWithoutLocationInput[] | PhotoUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: PhotoCreateOrConnectWithoutLocationInput | PhotoCreateOrConnectWithoutLocationInput[]
    upsert?: PhotoUpsertWithWhereUniqueWithoutLocationInput | PhotoUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: PhotoCreateManyLocationInputEnvelope
    set?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    disconnect?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    delete?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    connect?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    update?: PhotoUpdateWithWhereUniqueWithoutLocationInput | PhotoUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: PhotoUpdateManyWithWhereWithoutLocationInput | PhotoUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: PhotoScalarWhereInput | PhotoScalarWhereInput[]
  }

  export type TripLocationUpdateManyWithoutLocationNestedInput = {
    create?: XOR<TripLocationCreateWithoutLocationInput, TripLocationUncheckedCreateWithoutLocationInput> | TripLocationCreateWithoutLocationInput[] | TripLocationUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: TripLocationCreateOrConnectWithoutLocationInput | TripLocationCreateOrConnectWithoutLocationInput[]
    upsert?: TripLocationUpsertWithWhereUniqueWithoutLocationInput | TripLocationUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: TripLocationCreateManyLocationInputEnvelope
    set?: TripLocationWhereUniqueInput | TripLocationWhereUniqueInput[]
    disconnect?: TripLocationWhereUniqueInput | TripLocationWhereUniqueInput[]
    delete?: TripLocationWhereUniqueInput | TripLocationWhereUniqueInput[]
    connect?: TripLocationWhereUniqueInput | TripLocationWhereUniqueInput[]
    update?: TripLocationUpdateWithWhereUniqueWithoutLocationInput | TripLocationUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: TripLocationUpdateManyWithWhereWithoutLocationInput | TripLocationUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: TripLocationScalarWhereInput | TripLocationScalarWhereInput[]
  }

  export type TripUpdateOneWithoutLocationsNestedInput = {
    create?: XOR<TripCreateWithoutLocationsInput, TripUncheckedCreateWithoutLocationsInput>
    connectOrCreate?: TripCreateOrConnectWithoutLocationsInput
    upsert?: TripUpsertWithoutLocationsInput
    disconnect?: TripWhereInput | boolean
    delete?: TripWhereInput | boolean
    connect?: TripWhereUniqueInput
    update?: XOR<XOR<TripUpdateToOneWithWhereWithoutLocationsInput, TripUpdateWithoutLocationsInput>, TripUncheckedUpdateWithoutLocationsInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PhotoUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<PhotoCreateWithoutLocationInput, PhotoUncheckedCreateWithoutLocationInput> | PhotoCreateWithoutLocationInput[] | PhotoUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: PhotoCreateOrConnectWithoutLocationInput | PhotoCreateOrConnectWithoutLocationInput[]
    upsert?: PhotoUpsertWithWhereUniqueWithoutLocationInput | PhotoUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: PhotoCreateManyLocationInputEnvelope
    set?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    disconnect?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    delete?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    connect?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    update?: PhotoUpdateWithWhereUniqueWithoutLocationInput | PhotoUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: PhotoUpdateManyWithWhereWithoutLocationInput | PhotoUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: PhotoScalarWhereInput | PhotoScalarWhereInput[]
  }

  export type TripLocationUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<TripLocationCreateWithoutLocationInput, TripLocationUncheckedCreateWithoutLocationInput> | TripLocationCreateWithoutLocationInput[] | TripLocationUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: TripLocationCreateOrConnectWithoutLocationInput | TripLocationCreateOrConnectWithoutLocationInput[]
    upsert?: TripLocationUpsertWithWhereUniqueWithoutLocationInput | TripLocationUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: TripLocationCreateManyLocationInputEnvelope
    set?: TripLocationWhereUniqueInput | TripLocationWhereUniqueInput[]
    disconnect?: TripLocationWhereUniqueInput | TripLocationWhereUniqueInput[]
    delete?: TripLocationWhereUniqueInput | TripLocationWhereUniqueInput[]
    connect?: TripLocationWhereUniqueInput | TripLocationWhereUniqueInput[]
    update?: TripLocationUpdateWithWhereUniqueWithoutLocationInput | TripLocationUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: TripLocationUpdateManyWithWhereWithoutLocationInput | TripLocationUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: TripLocationScalarWhereInput | TripLocationScalarWhereInput[]
  }

  export type LocationCreateNestedOneWithoutPhotosInput = {
    create?: XOR<LocationCreateWithoutPhotosInput, LocationUncheckedCreateWithoutPhotosInput>
    connectOrCreate?: LocationCreateOrConnectWithoutPhotosInput
    connect?: LocationWhereUniqueInput
  }

  export type LocationUpdateOneRequiredWithoutPhotosNestedInput = {
    create?: XOR<LocationCreateWithoutPhotosInput, LocationUncheckedCreateWithoutPhotosInput>
    connectOrCreate?: LocationCreateOrConnectWithoutPhotosInput
    upsert?: LocationUpsertWithoutPhotosInput
    connect?: LocationWhereUniqueInput
    update?: XOR<XOR<LocationUpdateToOneWithWhereWithoutPhotosInput, LocationUpdateWithoutPhotosInput>, LocationUncheckedUpdateWithoutPhotosInput>
  }

  export type TripCreateNestedOneWithoutTripLocationInput = {
    create?: XOR<TripCreateWithoutTripLocationInput, TripUncheckedCreateWithoutTripLocationInput>
    connectOrCreate?: TripCreateOrConnectWithoutTripLocationInput
    connect?: TripWhereUniqueInput
  }

  export type LocationCreateNestedOneWithoutTripsInput = {
    create?: XOR<LocationCreateWithoutTripsInput, LocationUncheckedCreateWithoutTripsInput>
    connectOrCreate?: LocationCreateOrConnectWithoutTripsInput
    connect?: LocationWhereUniqueInput
  }

  export type TripUpdateOneRequiredWithoutTripLocationNestedInput = {
    create?: XOR<TripCreateWithoutTripLocationInput, TripUncheckedCreateWithoutTripLocationInput>
    connectOrCreate?: TripCreateOrConnectWithoutTripLocationInput
    upsert?: TripUpsertWithoutTripLocationInput
    connect?: TripWhereUniqueInput
    update?: XOR<XOR<TripUpdateToOneWithWhereWithoutTripLocationInput, TripUpdateWithoutTripLocationInput>, TripUncheckedUpdateWithoutTripLocationInput>
  }

  export type LocationUpdateOneRequiredWithoutTripsNestedInput = {
    create?: XOR<LocationCreateWithoutTripsInput, LocationUncheckedCreateWithoutTripsInput>
    connectOrCreate?: LocationCreateOrConnectWithoutTripsInput
    upsert?: LocationUpsertWithoutTripsInput
    connect?: LocationWhereUniqueInput
    update?: XOR<XOR<LocationUpdateToOneWithWhereWithoutTripsInput, LocationUpdateWithoutTripsInput>, LocationUncheckedUpdateWithoutTripsInput>
  }

  export type UserCreateNestedOneWithoutTripsInput = {
    create?: XOR<UserCreateWithoutTripsInput, UserUncheckedCreateWithoutTripsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTripsInput
    connect?: UserWhereUniqueInput
  }

  export type TripCreateNestedOneWithoutUsersInput = {
    create?: XOR<TripCreateWithoutUsersInput, TripUncheckedCreateWithoutUsersInput>
    connectOrCreate?: TripCreateOrConnectWithoutUsersInput
    connect?: TripWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutTripsNestedInput = {
    create?: XOR<UserCreateWithoutTripsInput, UserUncheckedCreateWithoutTripsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTripsInput
    upsert?: UserUpsertWithoutTripsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTripsInput, UserUpdateWithoutTripsInput>, UserUncheckedUpdateWithoutTripsInput>
  }

  export type TripUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<TripCreateWithoutUsersInput, TripUncheckedCreateWithoutUsersInput>
    connectOrCreate?: TripCreateOrConnectWithoutUsersInput
    upsert?: TripUpsertWithoutUsersInput
    connect?: TripWhereUniqueInput
    update?: XOR<XOR<TripUpdateToOneWithWhereWithoutUsersInput, TripUpdateWithoutUsersInput>, TripUncheckedUpdateWithoutUsersInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumUserTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.UserType | EnumUserTypeFieldRefInput<$PrismaModel>
    in?: $Enums.UserType[] | ListEnumUserTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserType[] | ListEnumUserTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumUserTypeFilter<$PrismaModel> | $Enums.UserType
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumUserTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserType | EnumUserTypeFieldRefInput<$PrismaModel>
    in?: $Enums.UserType[] | ListEnumUserTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserType[] | ListEnumUserTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumUserTypeWithAggregatesFilter<$PrismaModel> | $Enums.UserType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserTypeFilter<$PrismaModel>
    _max?: NestedEnumUserTypeFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type UserTripCreateWithoutUserInput = {
    trip: TripCreateNestedOneWithoutUsersInput
  }

  export type UserTripUncheckedCreateWithoutUserInput = {
    tripId: number
  }

  export type UserTripCreateOrConnectWithoutUserInput = {
    where: UserTripWhereUniqueInput
    create: XOR<UserTripCreateWithoutUserInput, UserTripUncheckedCreateWithoutUserInput>
  }

  export type UserTripCreateManyUserInputEnvelope = {
    data: UserTripCreateManyUserInput | UserTripCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserTripUpsertWithWhereUniqueWithoutUserInput = {
    where: UserTripWhereUniqueInput
    update: XOR<UserTripUpdateWithoutUserInput, UserTripUncheckedUpdateWithoutUserInput>
    create: XOR<UserTripCreateWithoutUserInput, UserTripUncheckedCreateWithoutUserInput>
  }

  export type UserTripUpdateWithWhereUniqueWithoutUserInput = {
    where: UserTripWhereUniqueInput
    data: XOR<UserTripUpdateWithoutUserInput, UserTripUncheckedUpdateWithoutUserInput>
  }

  export type UserTripUpdateManyWithWhereWithoutUserInput = {
    where: UserTripScalarWhereInput
    data: XOR<UserTripUpdateManyMutationInput, UserTripUncheckedUpdateManyWithoutUserInput>
  }

  export type UserTripScalarWhereInput = {
    AND?: UserTripScalarWhereInput | UserTripScalarWhereInput[]
    OR?: UserTripScalarWhereInput[]
    NOT?: UserTripScalarWhereInput | UserTripScalarWhereInput[]
    userId?: IntFilter<"UserTrip"> | number
    tripId?: IntFilter<"UserTrip"> | number
  }

  export type LocationCreateWithoutTripInput = {
    name: string
    description: string
    type: number
    rating: number
    latitude: number
    longitude: number
    photos?: PhotoCreateNestedManyWithoutLocationInput
    trips?: TripLocationCreateNestedManyWithoutLocationInput
  }

  export type LocationUncheckedCreateWithoutTripInput = {
    uuid?: number
    name: string
    description: string
    type: number
    rating: number
    latitude: number
    longitude: number
    photos?: PhotoUncheckedCreateNestedManyWithoutLocationInput
    trips?: TripLocationUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationCreateOrConnectWithoutTripInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutTripInput, LocationUncheckedCreateWithoutTripInput>
  }

  export type LocationCreateManyTripInputEnvelope = {
    data: LocationCreateManyTripInput | LocationCreateManyTripInput[]
    skipDuplicates?: boolean
  }

  export type UserTripCreateWithoutTripInput = {
    user: UserCreateNestedOneWithoutTripsInput
  }

  export type UserTripUncheckedCreateWithoutTripInput = {
    userId: number
  }

  export type UserTripCreateOrConnectWithoutTripInput = {
    where: UserTripWhereUniqueInput
    create: XOR<UserTripCreateWithoutTripInput, UserTripUncheckedCreateWithoutTripInput>
  }

  export type UserTripCreateManyTripInputEnvelope = {
    data: UserTripCreateManyTripInput | UserTripCreateManyTripInput[]
    skipDuplicates?: boolean
  }

  export type TripLocationCreateWithoutTripInput = {
    location: LocationCreateNestedOneWithoutTripsInput
  }

  export type TripLocationUncheckedCreateWithoutTripInput = {
    locationId: number
  }

  export type TripLocationCreateOrConnectWithoutTripInput = {
    where: TripLocationWhereUniqueInput
    create: XOR<TripLocationCreateWithoutTripInput, TripLocationUncheckedCreateWithoutTripInput>
  }

  export type TripLocationCreateManyTripInputEnvelope = {
    data: TripLocationCreateManyTripInput | TripLocationCreateManyTripInput[]
    skipDuplicates?: boolean
  }

  export type LocationUpsertWithWhereUniqueWithoutTripInput = {
    where: LocationWhereUniqueInput
    update: XOR<LocationUpdateWithoutTripInput, LocationUncheckedUpdateWithoutTripInput>
    create: XOR<LocationCreateWithoutTripInput, LocationUncheckedCreateWithoutTripInput>
  }

  export type LocationUpdateWithWhereUniqueWithoutTripInput = {
    where: LocationWhereUniqueInput
    data: XOR<LocationUpdateWithoutTripInput, LocationUncheckedUpdateWithoutTripInput>
  }

  export type LocationUpdateManyWithWhereWithoutTripInput = {
    where: LocationScalarWhereInput
    data: XOR<LocationUpdateManyMutationInput, LocationUncheckedUpdateManyWithoutTripInput>
  }

  export type LocationScalarWhereInput = {
    AND?: LocationScalarWhereInput | LocationScalarWhereInput[]
    OR?: LocationScalarWhereInput[]
    NOT?: LocationScalarWhereInput | LocationScalarWhereInput[]
    uuid?: IntFilter<"Location"> | number
    name?: StringFilter<"Location"> | string
    description?: StringFilter<"Location"> | string
    type?: IntFilter<"Location"> | number
    rating?: IntFilter<"Location"> | number
    latitude?: FloatFilter<"Location"> | number
    longitude?: FloatFilter<"Location"> | number
    tripUuid?: IntNullableFilter<"Location"> | number | null
  }

  export type UserTripUpsertWithWhereUniqueWithoutTripInput = {
    where: UserTripWhereUniqueInput
    update: XOR<UserTripUpdateWithoutTripInput, UserTripUncheckedUpdateWithoutTripInput>
    create: XOR<UserTripCreateWithoutTripInput, UserTripUncheckedCreateWithoutTripInput>
  }

  export type UserTripUpdateWithWhereUniqueWithoutTripInput = {
    where: UserTripWhereUniqueInput
    data: XOR<UserTripUpdateWithoutTripInput, UserTripUncheckedUpdateWithoutTripInput>
  }

  export type UserTripUpdateManyWithWhereWithoutTripInput = {
    where: UserTripScalarWhereInput
    data: XOR<UserTripUpdateManyMutationInput, UserTripUncheckedUpdateManyWithoutTripInput>
  }

  export type TripLocationUpsertWithWhereUniqueWithoutTripInput = {
    where: TripLocationWhereUniqueInput
    update: XOR<TripLocationUpdateWithoutTripInput, TripLocationUncheckedUpdateWithoutTripInput>
    create: XOR<TripLocationCreateWithoutTripInput, TripLocationUncheckedCreateWithoutTripInput>
  }

  export type TripLocationUpdateWithWhereUniqueWithoutTripInput = {
    where: TripLocationWhereUniqueInput
    data: XOR<TripLocationUpdateWithoutTripInput, TripLocationUncheckedUpdateWithoutTripInput>
  }

  export type TripLocationUpdateManyWithWhereWithoutTripInput = {
    where: TripLocationScalarWhereInput
    data: XOR<TripLocationUpdateManyMutationInput, TripLocationUncheckedUpdateManyWithoutTripInput>
  }

  export type TripLocationScalarWhereInput = {
    AND?: TripLocationScalarWhereInput | TripLocationScalarWhereInput[]
    OR?: TripLocationScalarWhereInput[]
    NOT?: TripLocationScalarWhereInput | TripLocationScalarWhereInput[]
    tripId?: IntFilter<"TripLocation"> | number
    locationId?: IntFilter<"TripLocation"> | number
  }

  export type PhotoCreateWithoutLocationInput = {
    url: string
  }

  export type PhotoUncheckedCreateWithoutLocationInput = {
    uuid?: number
    url: string
  }

  export type PhotoCreateOrConnectWithoutLocationInput = {
    where: PhotoWhereUniqueInput
    create: XOR<PhotoCreateWithoutLocationInput, PhotoUncheckedCreateWithoutLocationInput>
  }

  export type PhotoCreateManyLocationInputEnvelope = {
    data: PhotoCreateManyLocationInput | PhotoCreateManyLocationInput[]
    skipDuplicates?: boolean
  }

  export type TripLocationCreateWithoutLocationInput = {
    trip: TripCreateNestedOneWithoutTripLocationInput
  }

  export type TripLocationUncheckedCreateWithoutLocationInput = {
    tripId: number
  }

  export type TripLocationCreateOrConnectWithoutLocationInput = {
    where: TripLocationWhereUniqueInput
    create: XOR<TripLocationCreateWithoutLocationInput, TripLocationUncheckedCreateWithoutLocationInput>
  }

  export type TripLocationCreateManyLocationInputEnvelope = {
    data: TripLocationCreateManyLocationInput | TripLocationCreateManyLocationInput[]
    skipDuplicates?: boolean
  }

  export type TripCreateWithoutLocationsInput = {
    description: string
    name: string
    startDate: Date | string
    endDate: Date | string
    rating: number
    users?: UserTripCreateNestedManyWithoutTripInput
    TripLocation?: TripLocationCreateNestedManyWithoutTripInput
  }

  export type TripUncheckedCreateWithoutLocationsInput = {
    uuid?: number
    description: string
    name: string
    startDate: Date | string
    endDate: Date | string
    rating: number
    users?: UserTripUncheckedCreateNestedManyWithoutTripInput
    TripLocation?: TripLocationUncheckedCreateNestedManyWithoutTripInput
  }

  export type TripCreateOrConnectWithoutLocationsInput = {
    where: TripWhereUniqueInput
    create: XOR<TripCreateWithoutLocationsInput, TripUncheckedCreateWithoutLocationsInput>
  }

  export type PhotoUpsertWithWhereUniqueWithoutLocationInput = {
    where: PhotoWhereUniqueInput
    update: XOR<PhotoUpdateWithoutLocationInput, PhotoUncheckedUpdateWithoutLocationInput>
    create: XOR<PhotoCreateWithoutLocationInput, PhotoUncheckedCreateWithoutLocationInput>
  }

  export type PhotoUpdateWithWhereUniqueWithoutLocationInput = {
    where: PhotoWhereUniqueInput
    data: XOR<PhotoUpdateWithoutLocationInput, PhotoUncheckedUpdateWithoutLocationInput>
  }

  export type PhotoUpdateManyWithWhereWithoutLocationInput = {
    where: PhotoScalarWhereInput
    data: XOR<PhotoUpdateManyMutationInput, PhotoUncheckedUpdateManyWithoutLocationInput>
  }

  export type PhotoScalarWhereInput = {
    AND?: PhotoScalarWhereInput | PhotoScalarWhereInput[]
    OR?: PhotoScalarWhereInput[]
    NOT?: PhotoScalarWhereInput | PhotoScalarWhereInput[]
    uuid?: IntFilter<"Photo"> | number
    url?: StringFilter<"Photo"> | string
    locationId?: IntFilter<"Photo"> | number
  }

  export type TripLocationUpsertWithWhereUniqueWithoutLocationInput = {
    where: TripLocationWhereUniqueInput
    update: XOR<TripLocationUpdateWithoutLocationInput, TripLocationUncheckedUpdateWithoutLocationInput>
    create: XOR<TripLocationCreateWithoutLocationInput, TripLocationUncheckedCreateWithoutLocationInput>
  }

  export type TripLocationUpdateWithWhereUniqueWithoutLocationInput = {
    where: TripLocationWhereUniqueInput
    data: XOR<TripLocationUpdateWithoutLocationInput, TripLocationUncheckedUpdateWithoutLocationInput>
  }

  export type TripLocationUpdateManyWithWhereWithoutLocationInput = {
    where: TripLocationScalarWhereInput
    data: XOR<TripLocationUpdateManyMutationInput, TripLocationUncheckedUpdateManyWithoutLocationInput>
  }

  export type TripUpsertWithoutLocationsInput = {
    update: XOR<TripUpdateWithoutLocationsInput, TripUncheckedUpdateWithoutLocationsInput>
    create: XOR<TripCreateWithoutLocationsInput, TripUncheckedCreateWithoutLocationsInput>
    where?: TripWhereInput
  }

  export type TripUpdateToOneWithWhereWithoutLocationsInput = {
    where?: TripWhereInput
    data: XOR<TripUpdateWithoutLocationsInput, TripUncheckedUpdateWithoutLocationsInput>
  }

  export type TripUpdateWithoutLocationsInput = {
    description?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: IntFieldUpdateOperationsInput | number
    users?: UserTripUpdateManyWithoutTripNestedInput
    TripLocation?: TripLocationUpdateManyWithoutTripNestedInput
  }

  export type TripUncheckedUpdateWithoutLocationsInput = {
    uuid?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: IntFieldUpdateOperationsInput | number
    users?: UserTripUncheckedUpdateManyWithoutTripNestedInput
    TripLocation?: TripLocationUncheckedUpdateManyWithoutTripNestedInput
  }

  export type LocationCreateWithoutPhotosInput = {
    name: string
    description: string
    type: number
    rating: number
    latitude: number
    longitude: number
    trips?: TripLocationCreateNestedManyWithoutLocationInput
    Trip?: TripCreateNestedOneWithoutLocationsInput
  }

  export type LocationUncheckedCreateWithoutPhotosInput = {
    uuid?: number
    name: string
    description: string
    type: number
    rating: number
    latitude: number
    longitude: number
    tripUuid?: number | null
    trips?: TripLocationUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationCreateOrConnectWithoutPhotosInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutPhotosInput, LocationUncheckedCreateWithoutPhotosInput>
  }

  export type LocationUpsertWithoutPhotosInput = {
    update: XOR<LocationUpdateWithoutPhotosInput, LocationUncheckedUpdateWithoutPhotosInput>
    create: XOR<LocationCreateWithoutPhotosInput, LocationUncheckedCreateWithoutPhotosInput>
    where?: LocationWhereInput
  }

  export type LocationUpdateToOneWithWhereWithoutPhotosInput = {
    where?: LocationWhereInput
    data: XOR<LocationUpdateWithoutPhotosInput, LocationUncheckedUpdateWithoutPhotosInput>
  }

  export type LocationUpdateWithoutPhotosInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    trips?: TripLocationUpdateManyWithoutLocationNestedInput
    Trip?: TripUpdateOneWithoutLocationsNestedInput
  }

  export type LocationUncheckedUpdateWithoutPhotosInput = {
    uuid?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    tripUuid?: NullableIntFieldUpdateOperationsInput | number | null
    trips?: TripLocationUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type TripCreateWithoutTripLocationInput = {
    description: string
    name: string
    startDate: Date | string
    endDate: Date | string
    rating: number
    locations?: LocationCreateNestedManyWithoutTripInput
    users?: UserTripCreateNestedManyWithoutTripInput
  }

  export type TripUncheckedCreateWithoutTripLocationInput = {
    uuid?: number
    description: string
    name: string
    startDate: Date | string
    endDate: Date | string
    rating: number
    locations?: LocationUncheckedCreateNestedManyWithoutTripInput
    users?: UserTripUncheckedCreateNestedManyWithoutTripInput
  }

  export type TripCreateOrConnectWithoutTripLocationInput = {
    where: TripWhereUniqueInput
    create: XOR<TripCreateWithoutTripLocationInput, TripUncheckedCreateWithoutTripLocationInput>
  }

  export type LocationCreateWithoutTripsInput = {
    name: string
    description: string
    type: number
    rating: number
    latitude: number
    longitude: number
    photos?: PhotoCreateNestedManyWithoutLocationInput
    Trip?: TripCreateNestedOneWithoutLocationsInput
  }

  export type LocationUncheckedCreateWithoutTripsInput = {
    uuid?: number
    name: string
    description: string
    type: number
    rating: number
    latitude: number
    longitude: number
    tripUuid?: number | null
    photos?: PhotoUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationCreateOrConnectWithoutTripsInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutTripsInput, LocationUncheckedCreateWithoutTripsInput>
  }

  export type TripUpsertWithoutTripLocationInput = {
    update: XOR<TripUpdateWithoutTripLocationInput, TripUncheckedUpdateWithoutTripLocationInput>
    create: XOR<TripCreateWithoutTripLocationInput, TripUncheckedCreateWithoutTripLocationInput>
    where?: TripWhereInput
  }

  export type TripUpdateToOneWithWhereWithoutTripLocationInput = {
    where?: TripWhereInput
    data: XOR<TripUpdateWithoutTripLocationInput, TripUncheckedUpdateWithoutTripLocationInput>
  }

  export type TripUpdateWithoutTripLocationInput = {
    description?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: IntFieldUpdateOperationsInput | number
    locations?: LocationUpdateManyWithoutTripNestedInput
    users?: UserTripUpdateManyWithoutTripNestedInput
  }

  export type TripUncheckedUpdateWithoutTripLocationInput = {
    uuid?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: IntFieldUpdateOperationsInput | number
    locations?: LocationUncheckedUpdateManyWithoutTripNestedInput
    users?: UserTripUncheckedUpdateManyWithoutTripNestedInput
  }

  export type LocationUpsertWithoutTripsInput = {
    update: XOR<LocationUpdateWithoutTripsInput, LocationUncheckedUpdateWithoutTripsInput>
    create: XOR<LocationCreateWithoutTripsInput, LocationUncheckedCreateWithoutTripsInput>
    where?: LocationWhereInput
  }

  export type LocationUpdateToOneWithWhereWithoutTripsInput = {
    where?: LocationWhereInput
    data: XOR<LocationUpdateWithoutTripsInput, LocationUncheckedUpdateWithoutTripsInput>
  }

  export type LocationUpdateWithoutTripsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    photos?: PhotoUpdateManyWithoutLocationNestedInput
    Trip?: TripUpdateOneWithoutLocationsNestedInput
  }

  export type LocationUncheckedUpdateWithoutTripsInput = {
    uuid?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    tripUuid?: NullableIntFieldUpdateOperationsInput | number | null
    photos?: PhotoUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type UserCreateWithoutTripsInput = {
    firstName: string
    lastName: string
    avatar?: string | null
    username: string
    password: string
    email: string
    type: $Enums.UserType
  }

  export type UserUncheckedCreateWithoutTripsInput = {
    uuid?: number
    firstName: string
    lastName: string
    avatar?: string | null
    username: string
    password: string
    email: string
    type: $Enums.UserType
  }

  export type UserCreateOrConnectWithoutTripsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTripsInput, UserUncheckedCreateWithoutTripsInput>
  }

  export type TripCreateWithoutUsersInput = {
    description: string
    name: string
    startDate: Date | string
    endDate: Date | string
    rating: number
    locations?: LocationCreateNestedManyWithoutTripInput
    TripLocation?: TripLocationCreateNestedManyWithoutTripInput
  }

  export type TripUncheckedCreateWithoutUsersInput = {
    uuid?: number
    description: string
    name: string
    startDate: Date | string
    endDate: Date | string
    rating: number
    locations?: LocationUncheckedCreateNestedManyWithoutTripInput
    TripLocation?: TripLocationUncheckedCreateNestedManyWithoutTripInput
  }

  export type TripCreateOrConnectWithoutUsersInput = {
    where: TripWhereUniqueInput
    create: XOR<TripCreateWithoutUsersInput, TripUncheckedCreateWithoutUsersInput>
  }

  export type UserUpsertWithoutTripsInput = {
    update: XOR<UserUpdateWithoutTripsInput, UserUncheckedUpdateWithoutTripsInput>
    create: XOR<UserCreateWithoutTripsInput, UserUncheckedCreateWithoutTripsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTripsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTripsInput, UserUncheckedUpdateWithoutTripsInput>
  }

  export type UserUpdateWithoutTripsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
  }

  export type UserUncheckedUpdateWithoutTripsInput = {
    uuid?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
  }

  export type TripUpsertWithoutUsersInput = {
    update: XOR<TripUpdateWithoutUsersInput, TripUncheckedUpdateWithoutUsersInput>
    create: XOR<TripCreateWithoutUsersInput, TripUncheckedCreateWithoutUsersInput>
    where?: TripWhereInput
  }

  export type TripUpdateToOneWithWhereWithoutUsersInput = {
    where?: TripWhereInput
    data: XOR<TripUpdateWithoutUsersInput, TripUncheckedUpdateWithoutUsersInput>
  }

  export type TripUpdateWithoutUsersInput = {
    description?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: IntFieldUpdateOperationsInput | number
    locations?: LocationUpdateManyWithoutTripNestedInput
    TripLocation?: TripLocationUpdateManyWithoutTripNestedInput
  }

  export type TripUncheckedUpdateWithoutUsersInput = {
    uuid?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: IntFieldUpdateOperationsInput | number
    locations?: LocationUncheckedUpdateManyWithoutTripNestedInput
    TripLocation?: TripLocationUncheckedUpdateManyWithoutTripNestedInput
  }

  export type UserTripCreateManyUserInput = {
    tripId: number
  }

  export type UserTripUpdateWithoutUserInput = {
    trip?: TripUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserTripUncheckedUpdateWithoutUserInput = {
    tripId?: IntFieldUpdateOperationsInput | number
  }

  export type UserTripUncheckedUpdateManyWithoutUserInput = {
    tripId?: IntFieldUpdateOperationsInput | number
  }

  export type LocationCreateManyTripInput = {
    uuid?: number
    name: string
    description: string
    type: number
    rating: number
    latitude: number
    longitude: number
  }

  export type UserTripCreateManyTripInput = {
    userId: number
  }

  export type TripLocationCreateManyTripInput = {
    locationId: number
  }

  export type LocationUpdateWithoutTripInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    photos?: PhotoUpdateManyWithoutLocationNestedInput
    trips?: TripLocationUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateWithoutTripInput = {
    uuid?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    photos?: PhotoUncheckedUpdateManyWithoutLocationNestedInput
    trips?: TripLocationUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateManyWithoutTripInput = {
    uuid?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
  }

  export type UserTripUpdateWithoutTripInput = {
    user?: UserUpdateOneRequiredWithoutTripsNestedInput
  }

  export type UserTripUncheckedUpdateWithoutTripInput = {
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type UserTripUncheckedUpdateManyWithoutTripInput = {
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type TripLocationUpdateWithoutTripInput = {
    location?: LocationUpdateOneRequiredWithoutTripsNestedInput
  }

  export type TripLocationUncheckedUpdateWithoutTripInput = {
    locationId?: IntFieldUpdateOperationsInput | number
  }

  export type TripLocationUncheckedUpdateManyWithoutTripInput = {
    locationId?: IntFieldUpdateOperationsInput | number
  }

  export type PhotoCreateManyLocationInput = {
    uuid?: number
    url: string
  }

  export type TripLocationCreateManyLocationInput = {
    tripId: number
  }

  export type PhotoUpdateWithoutLocationInput = {
    url?: StringFieldUpdateOperationsInput | string
  }

  export type PhotoUncheckedUpdateWithoutLocationInput = {
    uuid?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
  }

  export type PhotoUncheckedUpdateManyWithoutLocationInput = {
    uuid?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
  }

  export type TripLocationUpdateWithoutLocationInput = {
    trip?: TripUpdateOneRequiredWithoutTripLocationNestedInput
  }

  export type TripLocationUncheckedUpdateWithoutLocationInput = {
    tripId?: IntFieldUpdateOperationsInput | number
  }

  export type TripLocationUncheckedUpdateManyWithoutLocationInput = {
    tripId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TripCountOutputTypeDefaultArgs instead
     */
    export type TripCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TripCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LocationCountOutputTypeDefaultArgs instead
     */
    export type LocationCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LocationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TripDefaultArgs instead
     */
    export type TripArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TripDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LocationDefaultArgs instead
     */
    export type LocationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LocationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LocationTypeDefaultArgs instead
     */
    export type LocationTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LocationTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PhotoDefaultArgs instead
     */
    export type PhotoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PhotoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TripLocationDefaultArgs instead
     */
    export type TripLocationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TripLocationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserTripDefaultArgs instead
     */
    export type UserTripArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserTripDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}